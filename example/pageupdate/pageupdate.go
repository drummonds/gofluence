// Aim is to create a page, update and then delete it.
// Switching to using a client with responses
// Highlighting JSON200 unmarshalling of return values
// Not using the withbody versions which use an unmarshalled body
package main

import (
	"context"
	"fmt"
	"os"
	"strconv"

	gofluence "github.com/drummonds/gofluence/api"
	"github.com/oapi-codegen/oapi-codegen/v2/pkg/securityprovider"
)

func main() {
	// var (
	// 	mail  = os.Getenv("JSM_USER_EMAIL")
	// 	token = os.Getenv("JSM_TOKEN")
	// )
	// eg  JSM_DOMAIN="my_company.atlassian.net/wiki/api/v2/"

	host := fmt.Sprintf("https://%s", os.Getenv("JSM_DOMAIN"))

	basicAuth, err := securityprovider.NewSecurityProviderBasicAuth(
		os.Getenv("JSM_USER_EMAIL"),
		os.Getenv("JSM_TOKEN"))
	if err != nil {
		panic(err)
	}

	ctx := context.Background()

	ancestorStr := os.Getenv("CONF_ANCESTOR_ID")
	ancestor_id, err := strconv.ParseInt(ancestorStr, 10, 64)
	if err != nil {
		panic(err)
	}

	nc, err := gofluence.NewClientWithResponses(host, gofluence.WithRequestEditorFn(basicAuth.Intercept))
	if err != nil {
		panic(err)
	}

	fmt.Printf("Result %+v and err %v\n", nc, err)

	var bf gofluence.PrimaryBodyRepresentationSingle = "storage"
	pageParams := gofluence.GetPageByIdParams{BodyFormat: &bf}
	pageResponse, err := nc.GetPageByIdWithResponse(ctx, ancestor_id, &pageParams)
	if err != nil {
		panic(err)
	}
	fmt.Printf("--- Ancestor page title\n%v\n%+v \n", ancestor_id, string(*pageResponse.JSON200.Title))

	// Does the page exist?

	// Create a page to this ancestor
	spaceId := "72679670"
	new_page := "<h3>Hello new page</h3>\nNew autogenerated content."
	createPageParams := gofluence.CreatePageParams{}
	var wiki gofluence.PageBodyWriteRepresentation = "wiki"
	coreBody := gofluence.PageBodyWrite{Representation: &wiki, Value: &new_page}
	title := "Test gofluence"
	createBody := gofluence.CreatePageJSONRequestBody{SpaceId: spaceId, Title: &title, Body: &coreBody, ParentId: &ancestorStr}
	create_response, err := nc.CreatePageWithResponse(ctx, &createPageParams, createBody)
	if err != nil {
		panic(err)
	}
	if create_response.HTTPResponse.StatusCode != 200 {
		fmt.Printf("--- New Page Error - Status = %s\n%+v\n", create_response.HTTPResponse.Status, create_response)
	} else {
		// Note will fail if a page with the same ancestor and title already exists
		fmt.Printf("--- New Page title and body\n%+v\n", create_response)
	}

	// Update page to this ancestor

	// UpdatePageWithResponse(ctx context.Context, id int64, body UpdatePageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePageResponse, error)

	// Delete the page

}
