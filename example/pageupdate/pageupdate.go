// Aim is to create a page, update and then delete it.
// Switching to using a client with responses
// Highlighting JSON200 unmarshalling of return values
// Not using the with body versions which use an unmarshalled body
package main

import (
	"context"
	"fmt"
	"os"
	"strconv"
	"time"

	gofluence "github.com/drummonds/gofluence/api"
	"github.com/oapi-codegen/oapi-codegen/v2/pkg/securityprovider"
)

// eg domain="my_company.atlassian.net/wiki/api/v2/"
func NewClient(domain, user, token string) (*gofluence.ClientWithResponses, error) {
	host := fmt.Sprintf("https://%s", domain)
	basicAuth, err := securityprovider.NewSecurityProviderBasicAuth(user, token)
	if err != nil {
		panic(err)
	}

	nc, err := gofluence.NewClientWithResponses(host, gofluence.WithRequestEditorFn(basicAuth.Intercept))
	return nc, err
}

func getAncestorId(ctx context.Context, nc *gofluence.ClientWithResponses) string {

	ancestorStr := os.Getenv("CONF_ANCESTOR_ID")
	ancestor_id, err := strconv.ParseInt(ancestorStr, 10, 64)
	if err != nil {
		panic(err)
	}

	var bf gofluence.PrimaryBodyRepresentationSingle = "storage"
	pageParams := gofluence.GetPageByIdParams{BodyFormat: &bf}
	pageResponse, err := nc.GetPageByIdWithResponse(ctx, ancestor_id, &pageParams)
	if err != nil {
		panic(err)
	}
	fmt.Printf("--- Ancestor page title\n%v\n%+v\n", ancestor_id, string(*pageResponse.JSON200.Title))

	return ancestorStr
}

func pageExists(ctx context.Context, nc *gofluence.ClientWithResponses, spacesId *[]int64, title *string) (*string, *int32, bool) {
	pageParams := gofluence.GetPagesParams{SpaceId: spacesId, Title: title}
	pageResponse, err := nc.GetPagesWithResponse(ctx, &pageParams)
	if err != nil {
		panic(err)
	}
	json := (*pageResponse).JSON200
	if json == nil {
		return nil, nil, false
	}
	results := json.Results
	if results == nil {
		return nil, nil, false
	}
	if len(*results) == 0 {
		return nil, nil, false
	}
	id := (*results)[0].Id
	version := (*results)[0].Version
	if version == nil {
		return id, nil, false
	}
	versionNumber := version.Number
	return id, versionNumber, true
}

func updatePage(ctx context.Context, nc *gofluence.ClientWithResponses, pageId *string, versionNumber *int32, title *string) {
	// pageParams := gofluence.GetPagesParams{SpaceId: spacesId, Title: title}
	// pageResponse, err := nc.GetPagesWithResponse(ctx, &pageParams)
	// if err != nil {
	// 	panic(err)
	// }

	// UpdatePageWithResponse(ctx context.Context, id int64, body UpdatePageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePageResponse, error)
	id, err := strconv.ParseInt(*pageId, 10, 64)
	if err != nil {
		panic(err)
	}
	newVersionNumber := *versionNumber + 1
	next_page := fmt.Sprintf(`h3. Hello new page
Has been updated again, Version %v at %s
AUTO GENERATED So don't bother editing

|| Key || Meaning ||
|üñ•Ô∏è| host DNS entry works is available|
|‚ùå~DNS~| No host DNS entry, may not exist|
|üü¢| API endpoint working|
`, newVersionNumber, time.Now().Format(time.RFC3339))
	var wiki gofluence.PageBodyWriteRepresentation = "wiki"
	updateBody := gofluence.PageBodyWrite{
		Representation: &wiki,
		Value:          &next_page}
	updateBodyJSON := gofluence.UpdatePageJSONBody{}
	updateBodyJSON.Id = *pageId
	updateBodyJSON.Status = "current"
	updateBodyJSON.Title = *title
	updateBodyJSON.Body = updateBody
	updateBodyJSON.Version.Number = &newVersionNumber
	var updateBodyReq gofluence.UpdatePageJSONRequestBody = gofluence.UpdatePageJSONRequestBody(updateBodyJSON)

	update_response, err := nc.UpdatePageWithResponse(ctx, id, updateBodyReq)
	fmt.Printf("--- New Page title and body\n%+v\n", update_response)
}

func main() {
	nc, err := NewClient(
		os.Getenv("JSM_DOMAIN"),
		os.Getenv("JSM_USER_EMAIL"),
		os.Getenv("JSM_TOKEN"))
	if err != nil {
		panic(err)
	}
	fmt.Printf("Result %+v and err %v\n", nc, err)

	ctx := context.Background()

	ancestorStr := getAncestorId(ctx, nc)
	title := "Test gofluence"

	spaceId := "72679670"
	var spaceIds = []int64{72679670}

	// Does the page exist?
	pageId, versionNumber, exists := pageExists(ctx, nc, &spaceIds, &title)
	if exists {
		fmt.Printf("Page %s exists: %v\n", *pageId, exists)
	} else {
		fmt.Printf("Page not found so will create a new one\n")
		// Create a page to this ancestor
		new_page := "<h3>Hello new page</h3>\nNew autogenerated content."
		createPageParams := gofluence.CreatePageParams{}
		var wiki gofluence.PageBodyWriteRepresentation = "wiki"
		coreBody := gofluence.PageBodyWrite{Representation: &wiki, Value: &new_page}

		createBody := gofluence.CreatePageJSONRequestBody{SpaceId: spaceId, Title: &title, Body: &coreBody, ParentId: &ancestorStr}
		create_response, err := nc.CreatePageWithResponse(ctx, &createPageParams, createBody)
		if err != nil {
			panic(err)
		}
		if create_response.HTTPResponse.StatusCode != 200 {
			fmt.Printf("--- New Page Error - Status = %s\n%+v\n", create_response.HTTPResponse.Status, create_response)
		} else {
			// Note will fail if a page with the same ancestor and title already exists
			fmt.Printf("--- New Page title and body\n%+v\n", create_response)
		}
		pageId, versionNumber, exists = pageExists(ctx, nc, &spaceIds, &title)
		if !exists {
			panic(fmt.Errorf("Page didn't exist but trying to create."))
		}
	}

	// Update page to this ancestor
	updatePage(ctx, nc, pageId, versionNumber, &title)

	// Delete the page

}
