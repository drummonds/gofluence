{
  "components": {
    "requestBodies": {
      "BlogPostCreateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "body": {
                  "$ref": "#/components/schemas/BlogPostBodyWrite"
                },
                "spaceId": {
                  "description": "ID of the space",
                  "type": "string"
                },
                "status": {
                  "description": "The status of the blog post, specifies if the blog post will be created as a new blog post or a draft",
                  "type": "string"
                },
                "title": {
                  "description": "Title of the blog post, required if creating non-draft.",
                  "type": "string"
                }
              },
              "required": [
                "spaceId"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "BlogPostUpdateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "body": {
                  "$ref": "#/components/schemas/BlogPostBodyWrite"
                },
                "id": {
                  "description": "Id of the blog post.",
                  "type": "string"
                },
                "spaceId": {
                  "description": "ID of the containing space.\n\nThis currently **does not support moving the blog post to a different space**.",
                  "type": "string"
                },
                "status": {
                  "description": "The updated status of the blog post.\n\nNote, if you change the status of a blog post from 'current' to 'draft' and it has an existing draft, the existing draft will be deleted in favor of the updated draft.\nAdditionally, this endpoint can be used to restore a 'trashed' or 'deleted' blog post to 'current' status. For restoration, blog post contents will not be updated and only the blog post status will be changed.",
                  "type": "string"
                },
                "title": {
                  "description": "Title of the blog post.",
                  "type": "string"
                },
                "version": {
                  "properties": {
                    "message": {
                      "description": "An optional message to be stored with the version.",
                      "type": "string"
                    },
                    "number": {
                      "description": "The new version number of the updated blog post. \nSet this to the current version number plus one, unless you are updating the status to 'draft' which requires a version number of 1.\n\nIf you don't know the current version number, use Get blog post by id.",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "id",
                "status",
                "title",
                "body",
                "version"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "BulkUsersRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "accountIds": {
                  "description": "List of accountIds to retrieve user info for.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 250,
                  "minItems": 1,
                  "nullable": false,
                  "type": "array"
                }
              },
              "required": [
                "accountIds"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "CheckAccessOrInviteByEmailRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "emails": {
                  "description": "List of emails to check access to site.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 100,
                  "minItems": 1,
                  "nullable": false,
                  "type": "array"
                }
              },
              "required": [
                "emails"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "ContentClassificationLevelDeleteRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "status": {
                  "description": "Status of the content.",
                  "type": "string"
                }
              },
              "required": [
                "status"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "ContentClassificationLevelUpdateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "id": {
                  "description": "The ID of the classification level.",
                  "type": "string"
                },
                "status": {
                  "description": "Status of the content.",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "status"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "ContentIdToContentTypeRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "contentIds": {
                  "description": "The content ids to convert. They may be provided as strings or numbers.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 100,
                  "type": "array"
                }
              },
              "required": [
                "contentIds"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "CustomContentCreateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "blogPostId": {
                  "description": "ID of the containing Blog Post.",
                  "type": "string"
                },
                "body": {
                  "$ref": "#/components/schemas/CustomContentBodyWrite"
                },
                "customContentId": {
                  "description": "ID of the containing custom content.",
                  "type": "string"
                },
                "pageId": {
                  "description": "ID of the containing page.",
                  "type": "string"
                },
                "spaceId": {
                  "description": "ID of the containing space.",
                  "type": "string"
                },
                "status": {
                  "description": "The status of the custom content. Defaults to `current` when status not provided.",
                  "type": "string"
                },
                "title": {
                  "description": "Title of the custom content.",
                  "type": "string"
                },
                "type": {
                  "description": "Type of custom content.",
                  "type": "string"
                }
              },
              "required": [
                "body",
                "title",
                "type"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "CustomContentUpdateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "blogPostId": {
                  "description": "ID of the containing Blog Post.",
                  "type": "string"
                },
                "body": {
                  "$ref": "#/components/schemas/CustomContentBodyWrite"
                },
                "customContentId": {
                  "description": "ID of the containing custom content.",
                  "type": "string"
                },
                "id": {
                  "description": "Id of custom content.",
                  "type": "string"
                },
                "pageId": {
                  "description": "ID of the containing page.",
                  "type": "string"
                },
                "spaceId": {
                  "description": "ID of the containing space.",
                  "type": "string"
                },
                "status": {
                  "description": "The status of the custom content.",
                  "type": "string"
                },
                "title": {
                  "description": "Title of the custom content.",
                  "type": "string"
                },
                "type": {
                  "description": "Type of custom content.",
                  "type": "string"
                },
                "version": {
                  "properties": {
                    "message": {
                      "description": "An optional message to be stored with the version.",
                      "type": "string"
                    },
                    "number": {
                      "description": "The version number, must be incremented by one.",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "body",
                "id",
                "status",
                "title",
                "type",
                "version"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "DatabaseCreateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "parentId": {
                  "description": "The parent content ID of the database.",
                  "type": "string"
                },
                "spaceId": {
                  "description": "ID of the space.",
                  "type": "string"
                },
                "title": {
                  "description": "Title of the database.",
                  "type": "string"
                }
              },
              "required": [
                "spaceId"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "FolderCreateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "parentId": {
                  "description": "The parent content ID of the folder.",
                  "type": "string"
                },
                "spaceId": {
                  "description": "ID of the space.",
                  "type": "string"
                },
                "title": {
                  "description": "Title of the folder.",
                  "type": "string"
                }
              },
              "required": [
                "spaceId"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "LiveEditContentClassificationLevelResetRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "status": {
                  "description": "Status of the content.",
                  "type": "string"
                }
              },
              "required": [
                "status"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "LiveEditContentClassificationLevelUpdateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "id": {
                  "description": "The ID of the classification level.",
                  "type": "string"
                },
                "status": {
                  "description": "Status of the content.",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "status"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "PageCreateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "body": {
                  "$ref": "#/components/schemas/PageBodyWrite"
                },
                "parentId": {
                  "description": "The parent content ID of the page. If the `root-level` query parameter is set to false and a value is \nnot supplied for this parameter, then the space homepage's ID will be used. If the `root-level` query \nparameter is set to true, then a value may not be supplied for this parameter.",
                  "type": "string"
                },
                "spaceId": {
                  "description": "ID of the space.",
                  "type": "string"
                },
                "status": {
                  "description": "The status of the page, published or draft.",
                  "type": "string"
                },
                "title": {
                  "description": "Title of the page, required if page status is not draft.",
                  "type": "string"
                }
              },
              "required": [
                "spaceId"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "PageUpdateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "body": {
                  "$ref": "#/components/schemas/PageBodyWrite"
                },
                "id": {
                  "description": "Id of the page.",
                  "type": "string"
                },
                "ownerId": {
                  "description": "Account ID of the page owner.\n\nThis allows page ownership to be transferred to another user.",
                  "format": "string"
                },
                "parentId": {
                  "description": "ID of the parent page.\n\nThis allows the page to be moved under a different parent within the same space.",
                  "format": "string"
                },
                "spaceId": {
                  "description": "ID of the containing space.\n\nThis currently **does not support moving the page to a different space**.",
                  "format": "string"
                },
                "status": {
                  "description": "The updated status of the page.\n\nNote, if you change the status of a page from 'current' to 'draft' and it has an existing draft, the existing draft will be deleted in favor of the updated draft.\nAdditionally, this endpoint can be used to restore a 'trashed' or 'deleted' page to 'current' status. For restoration, page contents will not be updated and only the page status will be changed.",
                  "type": "string"
                },
                "title": {
                  "description": "Title of the page.",
                  "type": "string"
                },
                "version": {
                  "properties": {
                    "message": {
                      "description": "An optional message to be stored with the version.",
                      "type": "string"
                    },
                    "number": {
                      "description": "The new version of the updated page. \nSet this to the current version number plus one, unless you are updating the status to 'draft' which requires a version number of 1.\n\nIf you don't know the current version number, use Get page by id.",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "id",
                "status",
                "title",
                "body",
                "version"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "SetSpaceRoleAssignmentRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "principal": {
                  "$ref": "#/components/schemas/Principal"
                },
                "roleId": {
                  "description": "The role to which the principal is assigned.",
                  "type": "string"
                }
              },
              "required": [
                "principal"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "SmartLinkCreateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "embedUrl": {
                  "description": "The URL that the Smart Link in the content tree should be populated with.",
                  "type": "string"
                },
                "parentId": {
                  "description": "The parent content ID of the Smart Link in the content tree.",
                  "type": "string"
                },
                "spaceId": {
                  "description": "ID of the space.",
                  "type": "string"
                },
                "title": {
                  "description": "Title of the Smart Link in the content tree.",
                  "type": "string"
                }
              },
              "required": [
                "spaceId"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "SpaceCreateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "alias": {
                  "description": "This field will be used as the new identifier for the space in confluence page URLs. If the alias property is not provided, the key property is required to be used instead. Maximum 255 alphanumeric characters in length.",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the new/updated space. Note, only the 'plain' representation is currently supported.",
                  "properties": {
                    "representation": {
                      "description": "The format of the description.",
                      "type": "string"
                    },
                    "value": {
                      "description": "The space description.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "key": {
                  "description": "The key for the new space. See [Space Keys](https://support.atlassian.com/confluence-cloud/docs/create-a-space/). If the key property is not provided, the alias property is required to be used instead.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the space to be created.",
                  "type": "string"
                },
                "roleAssignments": {
                  "description": "The role assignments for the new space. If none are provided, the Default Space Roles are applied. If roles are provided, the space is created with exactly the provided set of roles. A private space is created if only the creator is assigned to a role and it’s the Admin role. At least one Admin role assignment must be specified.",
                  "properties": {
                    "principal": {
                      "$ref": "#/components/schemas/Principal"
                    },
                    "roleId": {
                      "description": "The role to which the principal is assigned.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "SpaceDefaultClassificationLevelUpdateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "id": {
                  "description": "The ID of the classification level.",
                  "type": "string"
                },
                "status": {
                  "description": "Status of the content.",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "status"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "TaskUpdateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "assignedTo": {
                  "description": "Account ID of the user to whom this task is assigned.",
                  "type": "string"
                },
                "blogPostId": {
                  "description": "ID of the blog post the task is in.",
                  "type": "string"
                },
                "completedAt": {
                  "description": "Date and time when the task was completed. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
                  "format": "date-time",
                  "type": "string"
                },
                "completedBy": {
                  "description": "Account ID of the user who completed this task.",
                  "type": "string"
                },
                "createdAt": {
                  "description": "Date and time when the task was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
                  "format": "date-time",
                  "type": "string"
                },
                "createdBy": {
                  "description": "Account ID of the user who created this task.",
                  "type": "string"
                },
                "dueAt": {
                  "description": "Date and time when the task is due. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
                  "format": "date-time",
                  "type": "string"
                },
                "id": {
                  "description": "ID of the task.",
                  "type": "string"
                },
                "localId": {
                  "description": "Local ID of the task. This ID is local to the corresponding page or blog post.",
                  "type": "string"
                },
                "pageId": {
                  "description": "ID of the page the task is in.",
                  "type": "string"
                },
                "spaceId": {
                  "description": "ID of the space the task is in.",
                  "type": "string"
                },
                "status": {
                  "description": "Status of the task.",
                  "type": "string"
                },
                "updatedAt": {
                  "description": "Date and time when the task was updated. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "status"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      }
    },
    "schemas": {
      "AbstractPageLinks": {
        "properties": {
          "editui": {
            "description": "Edit UI link of the content.",
            "type": "string"
          },
          "tinyui": {
            "description": "Web UI link of the content.",
            "type": "string"
          },
          "webui": {
            "description": "Web UI link of the content.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountStatus": {
        "description": "The account status of the user.",
        "enum": [
          "active",
          "inactive",
          "closed",
          "unknown"
        ],
        "type": "string"
      },
      "AccountType": {
        "description": "The account type of the user.",
        "enum": [
          "atlassian",
          "app",
          "customer",
          "unknown"
        ],
        "type": "string"
      },
      "Ancestor": {
        "properties": {
          "id": {
            "description": "ID of the ancestor",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AncestorType"
          }
        },
        "type": "object"
      },
      "AncestorType": {
        "description": "The type of ancestor.",
        "enum": [
          "page",
          "whiteboard",
          "database",
          "embed",
          "folder"
        ],
        "type": "string"
      },
      "AttachmentBulk": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/AttachmentLinks"
          },
          "blogPostId": {
            "description": "ID of the containing blog post.\n\nNote: This is only returned if the attachment has a container that is a blog post.",
            "type": "string"
          },
          "comment": {
            "description": "Comment for the attachment.",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time when the attachment was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "customContentId": {
            "description": "ID of the containing custom content.\n\nNote: This is only returned if the attachment has a container that is custom content.",
            "type": "string"
          },
          "downloadLink": {
            "description": "Download link of the attachment.",
            "type": "string"
          },
          "fileId": {
            "description": "File ID of the attachment. This is the ID referenced in `atlas_doc_format` bodies and is distinct from the attachment ID.",
            "type": "string"
          },
          "fileSize": {
            "description": "File size of the attachment.",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "ID of the attachment.",
            "type": "string"
          },
          "mediaType": {
            "description": "Media Type for the attachment.",
            "type": "string"
          },
          "mediaTypeDescription": {
            "description": "Media Type description for the attachment.",
            "type": "string"
          },
          "pageId": {
            "description": "ID of the containing page.\n\nNote: This is only returned if the attachment has a container that is a page.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the comment.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "webuiLink": {
            "description": "WebUI link of the attachment.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AttachmentCommentModel": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          },
          "attachmentId": {
            "description": "ID of the attachment containing the comment.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/BodySingle"
          },
          "id": {
            "description": "ID of the comment.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the comment.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "AttachmentLinks": {
        "properties": {
          "download": {
            "description": "Download link of the content.",
            "type": "string"
          },
          "webui": {
            "description": "Web UI link of the content.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AttachmentSingle": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/AttachmentLinks"
          },
          "blogPostId": {
            "description": "ID of the containing blog post.\n\nNote: This is only returned if the attachment has a container that is a blog post.",
            "type": "string"
          },
          "comment": {
            "description": "Comment for the attachment.",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time when the attachment was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "customContentId": {
            "description": "ID of the containing custom content.\n\nNote: This is only returned if the attachment has a container that is custom content.",
            "type": "string"
          },
          "downloadLink": {
            "description": "Download link of the attachment.",
            "type": "string"
          },
          "fileId": {
            "description": "File ID of the attachment. This is the ID referenced in `atlas_doc_format` bodies and is distinct from the attachment ID.",
            "type": "string"
          },
          "fileSize": {
            "description": "File size of the attachment.",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "ID of the attachment.",
            "type": "string"
          },
          "labels": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Label"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "mediaType": {
            "description": "Media Type for the attachment.",
            "type": "string"
          },
          "mediaTypeDescription": {
            "description": "Media Type description for the attachment.",
            "type": "string"
          },
          "operations": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "pageId": {
            "description": "ID of the containing page.\n\nNote: This is only returned if the attachment has a container that is a page.",
            "type": "string"
          },
          "properties": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/ContentProperty"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the comment.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "versions": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Version"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "webuiLink": {
            "description": "WebUI link of the attachment.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AttachmentSortOrder": {
        "description": "The sort fields for attachments. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.",
        "enum": [
          "created-date",
          "-created-date",
          "modified-date",
          "-modified-date"
        ],
        "type": "string"
      },
      "AttachmentVersion": {
        "properties": {
          "attachment": {
            "$ref": "#/components/schemas/VersionedEntity"
          },
          "authorId": {
            "description": "The account ID of the user who created this version.",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "description": "Message associated with the current version.",
            "type": "string"
          },
          "minorEdit": {
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.",
            "type": "boolean"
          },
          "number": {
            "description": "The version number.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BlogPostBodyWrite": {
        "properties": {
          "representation": {
            "description": "Type of content representation used for the value field.",
            "enum": [
              "storage",
              "atlas_doc_format",
              "wiki"
            ],
            "type": "string"
          },
          "value": {
            "description": "Body of the blog post, in the format found in the representation field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BlogPostBulk": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/AbstractPageLinks"
          },
          "authorId": {
            "description": "The account ID of the user who created this blog post originally.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "createdAt": {
            "description": "Date and time when the blog post was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of the blog post.",
            "type": "string"
          },
          "spaceId": {
            "description": "ID of the space the blog post is in.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/BlogPostContentStatus"
          },
          "title": {
            "description": "Title of the blog post.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "BlogPostCommentModel": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          },
          "blogPostId": {
            "description": "ID of the blog post the comment is in.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "id": {
            "description": "ID of the comment.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the comment.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "BlogPostContentStatus": {
        "description": "The status of the content.",
        "enum": [
          "current",
          "draft",
          "historical",
          "trashed",
          "deleted",
          "any"
        ],
        "type": "string"
      },
      "BlogPostInlineCommentModel": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          },
          "blogPostId": {
            "description": "ID of the blog post the comment is in.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "id": {
            "description": "ID of the comment.",
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/InlineCommentProperties"
          },
          "resolutionStatus": {
            "$ref": "#/components/schemas/InlineCommentResolutionStatus"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the comment.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "BlogPostNestedBodyWrite": {
        "description": "Body of the blog post. Only one body format should be specified as the property\nfor this object, e.g. `storage`.",
        "properties": {
          "atlas_doc_format": {
            "$ref": "#/components/schemas/BlogPostBodyWrite"
          },
          "storage": {
            "$ref": "#/components/schemas/BlogPostBodyWrite"
          },
          "wiki": {
            "$ref": "#/components/schemas/BlogPostBodyWrite"
          }
        },
        "type": "object"
      },
      "BlogPostSingle": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/AbstractPageLinks"
          },
          "authorId": {
            "description": "The account ID of the user who created this blog post originally.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/BodySingle"
          },
          "createdAt": {
            "description": "Date and time when the blog post was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of the blog post.",
            "type": "string"
          },
          "isFavoritedByCurrentUser": {
            "description": "Whether the blog post has been favorited by the current user.",
            "type": "boolean"
          },
          "labels": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Label"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "likes": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Like"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "operations": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "properties": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/ContentProperty"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "spaceId": {
            "description": "ID of the space the blog post is in.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/BlogPostContentStatus"
          },
          "title": {
            "description": "Title of the blog post.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "versions": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Version"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "BlogPostSortOrder": {
        "description": "The sort fields for blog posts. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.",
        "enum": [
          "id",
          "-id",
          "created-date",
          "-created-date",
          "modified-date",
          "-modified-date"
        ],
        "type": "string"
      },
      "BlogPostVersion": {
        "properties": {
          "authorId": {
            "description": "The account ID of the user who created this version.",
            "type": "string"
          },
          "blogpost": {
            "$ref": "#/components/schemas/VersionedEntity"
          },
          "createdAt": {
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "description": "Message associated with the current version.",
            "type": "string"
          },
          "minorEdit": {
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.",
            "type": "boolean"
          },
          "number": {
            "description": "The version number.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BodyBulk": {
        "description": "Contains fields for each representation type requested.",
        "properties": {
          "atlas_doc_format": {
            "$ref": "#/components/schemas/BodyType"
          },
          "storage": {
            "$ref": "#/components/schemas/BodyType"
          }
        },
        "type": "object"
      },
      "BodySingle": {
        "description": "Contains fields for each representation type requested.",
        "properties": {
          "atlas_doc_format": {
            "$ref": "#/components/schemas/BodyType"
          },
          "storage": {
            "$ref": "#/components/schemas/BodyType"
          },
          "view": {
            "$ref": "#/components/schemas/BodyType"
          }
        },
        "type": "object"
      },
      "BodyType": {
        "properties": {
          "representation": {
            "description": "Type of content representation used for the value field.",
            "type": "string"
          },
          "value": {
            "description": "Body of the content, in the format found in the representation field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChildCustomContent": {
        "properties": {
          "id": {
            "description": "ID of the child custom content.",
            "type": "string"
          },
          "spaceId": {
            "description": "ID of the space the custom content is in.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/OnlyArchivedAndCurrentContentStatus"
          },
          "title": {
            "description": "Title of the custom content.",
            "type": "string"
          },
          "type": {
            "description": "Custom content type.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChildCustomContentSortOrder": {
        "description": "The sort fields for child custom content. The default sort direction is ascending by id. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.",
        "enum": [
          "created-date",
          "-created-date",
          "id",
          "-id",
          "modified-date",
          "-modified-date"
        ],
        "type": "string"
      },
      "ChildPage": {
        "properties": {
          "childPosition": {
            "description": "Position of child page within the given parent page tree.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "id": {
            "description": "ID of the page.",
            "type": "string"
          },
          "spaceId": {
            "description": "ID of the space the page is in.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/OnlyArchivedAndCurrentContentStatus"
          },
          "title": {
            "description": "Title of the page.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChildPageSortOrder": {
        "description": "The sort fields for child pages. The default sort direction is ascending by child-position. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.",
        "enum": [
          "created-date",
          "-created-date",
          "id",
          "-id",
          "child-position",
          "-child-position",
          "modified-date",
          "-modified-date"
        ],
        "type": "string"
      },
      "ChildrenCommentModel": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "id": {
            "description": "ID of the comment.",
            "type": "string"
          },
          "parentCommentId": {
            "description": "ID of the parent comment the child comment is in.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the comment.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "ClassificationLevel": {
        "description": "A unit of [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/) defined by an organiation. \nA classification level may be associated with specific storage and handling requirements or expectations.",
        "properties": {
          "color": {
            "$ref": "#/components/schemas/ClassificationLevelColor",
            "description": "The color of the classification level object.",
            "type": "object"
          },
          "description": {
            "description": "The description of the classification level object.",
            "type": "string"
          },
          "guideline": {
            "description": "The guideline of the classification level object.",
            "type": "string"
          },
          "id": {
            "description": "The ID of the classification level.",
            "type": "string"
          },
          "name": {
            "description": "The name of the classification level object.",
            "type": "string"
          },
          "order": {
            "description": "The order of the classification level object.",
            "type": "number"
          },
          "status": {
            "$ref": "#/components/schemas/ClassificationLevelStatus",
            "description": "The status of the classification level.",
            "type": "object"
          }
        },
        "title": "ClassificationLevel",
        "type": "object"
      },
      "ClassificationLevelColor": {
        "enum": [
          "RED",
          "RED_BOLD",
          "ORANGE",
          "YELLOW",
          "GREEN",
          "BLUE",
          "NAVY",
          "TEAL",
          "PURPLE",
          "GREY",
          "LIME"
        ],
        "type": "string"
      },
      "ClassificationLevelStatus": {
        "enum": [
          "DRAFT",
          "PUBLISHED",
          "ARCHIVED"
        ],
        "type": "string"
      },
      "CommentBodyWrite": {
        "properties": {
          "representation": {
            "description": "Type of content representation used for the value field.",
            "enum": [
              "storage",
              "atlas_doc_format",
              "wiki"
            ],
            "type": "string"
          },
          "value": {
            "description": "Body of the comment, in the format found in the representation field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CommentLinks": {
        "properties": {
          "webui": {
            "description": "Web UI link of the content.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CommentNestedBodyWrite": {
        "description": "Body of the comment. Only one body format should be specified as the property\nfor this object, e.g. `storage`.",
        "properties": {
          "atlas_doc_format": {
            "$ref": "#/components/schemas/CommentBodyWrite"
          },
          "storage": {
            "$ref": "#/components/schemas/CommentBodyWrite"
          },
          "wiki": {
            "$ref": "#/components/schemas/CommentBodyWrite"
          }
        },
        "type": "object"
      },
      "CommentSortOrder": {
        "description": "The sort fields for comments. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.",
        "enum": [
          "created-date",
          "-created-date",
          "modified-date",
          "-modified-date"
        ],
        "type": "string"
      },
      "CommentVersion": {
        "properties": {
          "authorId": {
            "description": "The account ID of the user who created this version.",
            "type": "string"
          },
          "comment": {
            "$ref": "#/components/schemas/VersionedEntity"
          },
          "createdAt": {
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "description": "Message associated with the current version.",
            "type": "string"
          },
          "minorEdit": {
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.",
            "type": "boolean"
          },
          "number": {
            "description": "The version number.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ContentIdToContentTypeResponse": {
        "properties": {
          "results": {
            "additionalProperties": {
              "anyOf": [
                {
                  "description": "Built in content types",
                  "enum": [
                    "page",
                    "blogpost",
                    "attachment",
                    "footer-comment",
                    "inline-comment"
                  ],
                  "type": "string"
                },
                {
                  "description": "Custom content types",
                  "type": "string"
                }
              ]
            },
            "description": "JSON object containing all requested content ids as keys and their associated content types as the values.\nDuplicate content ids in the request will be returned under a single key in the response. For built-in content\ntypes, the enumerations are as specified. Custom content ids will be mapped to their associated type.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "ContentProperty": {
        "properties": {
          "id": {
            "description": "ID of the property",
            "type": "string"
          },
          "key": {
            "description": "Key of the property",
            "type": "string"
          },
          "value": {
            "description": "Value of the property. Must be a valid JSON value."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "ContentPropertyCreateRequest": {
        "properties": {
          "key": {
            "description": "Key of the content property",
            "type": "string"
          },
          "value": {
            "description": "Value of the content property."
          }
        },
        "type": "object"
      },
      "ContentPropertySortOrder": {
        "description": "The sort fields for content properties. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.",
        "enum": [
          "key",
          "-key"
        ],
        "type": "string"
      },
      "ContentPropertyUpdateRequest": {
        "properties": {
          "key": {
            "description": "Key of the content property",
            "type": "string"
          },
          "value": {
            "description": "Value of the content property."
          },
          "version": {
            "description": "New version number and associated message",
            "properties": {
              "message": {
                "description": "Message to be associated with the new version.",
                "type": "string"
              },
              "number": {
                "description": "Version number of the new version. Should be 1 more than the current version number.",
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ContentStatus": {
        "description": "The status of the content.",
        "enum": [
          "current",
          "draft",
          "archived",
          "historical",
          "trashed",
          "deleted",
          "any"
        ],
        "type": "string"
      },
      "CreateFooterCommentModel": {
        "properties": {
          "attachmentId": {
            "description": "ID of the attachment, if intending to create a comment against an attachment.",
            "type": "string"
          },
          "blogPostId": {
            "description": "ID of the containing blog post, if intending to create a top level footer comment. Do not provide if creating a reply.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/CommentBodyWrite"
          },
          "customContentId": {
            "description": "ID of the custom content, if intending to create a comment against a custom content.",
            "type": "string"
          },
          "pageId": {
            "description": "ID of the containing page, if intending to create a top level footer comment. Do not provide if creating a reply.",
            "type": "string"
          },
          "parentCommentId": {
            "description": "ID of the parent comment, if intending to create a reply. Do not provide if creating a top level comment.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateInlineCommentModel": {
        "properties": {
          "blogPostId": {
            "description": "ID of the containing blog post, if intending to create a top level footer comment. Do not provide if creating a reply.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/CommentBodyWrite"
          },
          "inlineCommentProperties": {
            "description": "Object describing the text to highlight on the page/blog post. Only applicable for top level inline comments (not replies) and required in that case.",
            "properties": {
              "textSelection": {
                "description": "The text to highlight",
                "type": "string"
              },
              "textSelectionMatchCount": {
                "description": "The number of matches for the selected text on the page (should be strictly greater than textSelectionMatchIndex)",
                "type": "integer"
              },
              "textSelectionMatchIndex": {
                "description": "The match index to highlight. This is zero-based. E.g. if you have 3 occurrences of \"hello world\" on a page \nand you want to highlight the second occurrence, you should pass 1 for textSelectionMatchIndex and 3 for textSelectionMatchCount.",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "pageId": {
            "description": "ID of the containing page, if intending to create a top level footer comment. Do not provide if creating a reply.",
            "type": "string"
          },
          "parentCommentId": {
            "description": "ID of the parent comment, if intending to create a reply. Do not provide if creating a top level comment.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomContentBodyBulk": {
        "description": "Contains fields for each representation type requested.",
        "properties": {
          "atlas_doc_format": {
            "$ref": "#/components/schemas/BodyType"
          },
          "raw": {
            "$ref": "#/components/schemas/BodyType"
          },
          "storage": {
            "$ref": "#/components/schemas/BodyType"
          }
        },
        "type": "object"
      },
      "CustomContentBodyRepresentation": {
        "description": "The formats a custom content body can be represented as. A subset of BodyRepresentation.",
        "enum": [
          "raw",
          "storage",
          "atlas_doc_format"
        ],
        "type": "string"
      },
      "CustomContentBodyRepresentationSingle": {
        "description": "The formats a custom content body can be represented as. A subset of BodyRepresentation.",
        "enum": [
          "raw",
          "storage",
          "atlas_doc_format",
          "view",
          "export_view",
          "anonymous_export_view"
        ],
        "type": "string"
      },
      "CustomContentBodySingle": {
        "description": "Contains fields for each representation type requested.",
        "properties": {
          "atlas_doc_format": {
            "$ref": "#/components/schemas/BodyType"
          },
          "raw": {
            "$ref": "#/components/schemas/BodyType"
          },
          "storage": {
            "$ref": "#/components/schemas/BodyType"
          },
          "view": {
            "$ref": "#/components/schemas/BodyType"
          }
        },
        "type": "object"
      },
      "CustomContentBodyWrite": {
        "properties": {
          "representation": {
            "description": "Type of content representation used for the value field.",
            "enum": [
              "storage",
              "atlas_doc_format",
              "raw"
            ],
            "type": "string"
          },
          "value": {
            "description": "Body of the custom content, in the format found in the representation field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomContentBulk": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/CustomContentLinks"
          },
          "authorId": {
            "description": "The account ID of the user who created this custom content originally.",
            "type": "string"
          },
          "blogPostId": {
            "description": "ID of the containing blog post.\n\nNote: This is only returned if the custom content has a container that is a blog post.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/CustomContentBodyBulk"
          },
          "createdAt": {
            "description": "Date and time when the custom content was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "customContentId": {
            "description": "ID of the containing custom content.\n\nNote: This is only returned if the custom content has a container that is custom content.",
            "type": "string"
          },
          "id": {
            "description": "ID of the custom content.",
            "type": "string"
          },
          "pageId": {
            "description": "ID of the containing page.\n\nNote: This is only returned if the custom content has a container that is a page.",
            "type": "string"
          },
          "spaceId": {
            "description": "ID of the space the custom content is in.\n\nNote: This is always returned, regardless of if the custom content has a container that is a space.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the custom content.",
            "type": "string"
          },
          "type": {
            "description": "The type of custom content.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "CustomContentCommentModel": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          },
          "body": {
            "$ref": "#/components/schemas/BodySingle"
          },
          "customContentId": {
            "description": "ID of the custom content containing the comment.",
            "type": "string"
          },
          "id": {
            "description": "ID of the comment.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the comment.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "CustomContentLinks": {
        "properties": {
          "webui": {
            "description": "Web UI link of the content.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomContentNestedBodyWrite": {
        "description": "Body of the custom content. Only one body format should be specified as the property\nfor this object, e.g. `storage`.",
        "properties": {
          "atlas_doc_format": {
            "$ref": "#/components/schemas/CustomContentBodyWrite"
          },
          "raw": {
            "$ref": "#/components/schemas/CustomContentBodyWrite"
          },
          "storage": {
            "$ref": "#/components/schemas/CustomContentBodyWrite"
          }
        },
        "type": "object"
      },
      "CustomContentSingle": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/CustomContentLinks"
          },
          "authorId": {
            "description": "The account ID of the user who created this custom content originally.",
            "type": "string"
          },
          "blogPostId": {
            "description": "ID of the containing blog post.\n\nNote: This is only returned if the custom content has a container that is a blog post.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/CustomContentBodySingle"
          },
          "createdAt": {
            "description": "Date and time when the custom content was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "customContentId": {
            "description": "ID of the containing custom content.\n\nNote: This is only returned if the custom content has a container that is custom content.",
            "type": "string"
          },
          "id": {
            "description": "ID of the custom content.",
            "type": "string"
          },
          "labels": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Label"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "operations": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "pageId": {
            "description": "ID of the containing page.\n\nNote: This is only returned if the custom content has a container that is a page.",
            "type": "string"
          },
          "properties": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/ContentProperty"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "spaceId": {
            "description": "ID of the space the custom content is in.\n\nNote: This is always returned, regardless of if the custom content has a container that is a space.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the custom content.",
            "type": "string"
          },
          "type": {
            "description": "The type of custom content.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "versions": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Version"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "CustomContentSortOrder": {
        "description": "The sort fields for custom content. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.",
        "enum": [
          "id",
          "-id",
          "created-date",
          "-created-date",
          "modified-date",
          "-modified-date",
          "title",
          "-title"
        ],
        "type": "string"
      },
      "CustomContentVersion": {
        "properties": {
          "authorId": {
            "description": "The account ID of the user who created this version.",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "custom": {
            "$ref": "#/components/schemas/VersionedEntity"
          },
          "message": {
            "description": "Message associated with the current version.",
            "type": "string"
          },
          "minorEdit": {
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.",
            "type": "boolean"
          },
          "number": {
            "description": "The version number.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DataPolicyMetadata": {
        "additionalProperties": false,
        "description": "Details about data policies.",
        "properties": {
          "anyContentBlocked": {
            "description": "Whether the workspace contains any content blocked for (inaccessible to) the requesting client application.",
            "readOnly": true,
            "type": "boolean"
          }
        },
        "type": "object",
        "xml": {
          "name": "datapolicy"
        }
      },
      "DataPolicySpace": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/SpaceLinks"
          },
          "dataPolicy": {
            "properties": {
              "anyContentBlocked": {
                "description": "Whether the space contains any content blocked for (inaccessible to) the requesting client application.",
                "readOnly": true,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "description": {
            "$ref": "#/components/schemas/SpaceDescription"
          },
          "icon": {
            "$ref": "#/components/schemas/SpaceIcon"
          },
          "id": {
            "description": "ID of the space.",
            "type": "string"
          },
          "key": {
            "description": "Key of the space.",
            "type": "string"
          },
          "name": {
            "description": "Name of the space.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DatabaseLinks": {
        "properties": {
          "webui": {
            "description": "Web UI link of the content.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DatabaseSingle": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/DatabaseLinks"
          },
          "authorId": {
            "description": "The account ID of the user who created this database originally.",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time when the database was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of the database.",
            "type": "string"
          },
          "ownerId": {
            "description": "The account ID of the user who owns this database.",
            "type": "string"
          },
          "parentId": {
            "description": "ID of the parent content, or null if there is no parent content.",
            "type": "string"
          },
          "parentType": {
            "$ref": "#/components/schemas/ParentContentType"
          },
          "position": {
            "description": "Position of the database within the given parent page tree.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the database.",
            "type": "string"
          },
          "type": {
            "description": "The content type of the object.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "DetailedVersion": {
        "properties": {
          "authorId": {
            "description": "The account ID of the user who created this version.",
            "type": "string"
          },
          "collaborators": {
            "description": "The account IDs of users that collaborated on this version.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "contentTypeModified": {
            "description": "Describes if the content type is modified in this version (e.g. page to blog)",
            "type": "boolean"
          },
          "createdAt": {
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "description": "Message associated with the current version.",
            "type": "string"
          },
          "minorEdit": {
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.",
            "type": "boolean"
          },
          "nextVersion": {
            "description": "The version number of the version after this current content update.",
            "format": "int32",
            "type": "integer"
          },
          "number": {
            "description": "The current version number.",
            "format": "int32",
            "type": "integer"
          },
          "prevVersion": {
            "description": "The version number of the version prior to this current content update.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FolderLinks": {
        "properties": {
          "webui": {
            "description": "Web UI link of the content.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FolderSingle": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/FolderLinks"
          },
          "authorId": {
            "description": "The account ID of the user who created this folder.",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time when the folder was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of the folder.",
            "type": "string"
          },
          "ownerId": {
            "description": "The account ID of the user who owns this folder.",
            "type": "string"
          },
          "parentId": {
            "description": "ID of the parent content, or null if there is no parent content.",
            "type": "string"
          },
          "parentType": {
            "$ref": "#/components/schemas/ParentContentType"
          },
          "position": {
            "description": "Position of the folder within the given parent page tree.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the folder.",
            "type": "string"
          },
          "type": {
            "description": "The content type of the object.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "FooterCommentModel": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          },
          "attachmentId": {
            "description": "ID of the attachment containing the comment if the comment is on an attachment.",
            "type": "string"
          },
          "blogPostId": {
            "description": "ID of the blog post containing the comment if the comment is on a blog post.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/BodySingle"
          },
          "customContentId": {
            "description": "ID of the custom content containing the comment if the comment is on a custom content.",
            "type": "string"
          },
          "id": {
            "description": "ID of the comment.",
            "type": "string"
          },
          "likes": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Like"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "operations": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "pageId": {
            "description": "ID of the page containing the comment if the comment is on a page.",
            "type": "string"
          },
          "parentCommentId": {
            "description": "ID of the parent comment if the comment is a reply.",
            "type": "string"
          },
          "properties": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/ContentProperty"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the comment.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "versions": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Version"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Icon": {
        "description": "This object represents an icon. If used as a profilePicture, this may be returned as null, depending on the user's privacy setting.",
        "nullable": true,
        "properties": {
          "isDefault": {
            "type": "boolean"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "isDefault"
        ],
        "type": "object"
      },
      "InlineCommentChildrenModel": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "id": {
            "description": "ID of the comment.",
            "type": "string"
          },
          "parentCommentId": {
            "description": "ID of the parent comment the child comment is in.",
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/InlineCommentProperties"
          },
          "resolutionStatus": {
            "$ref": "#/components/schemas/InlineCommentResolutionStatus"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the comment.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "InlineCommentModel": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          },
          "blogPostId": {
            "description": "ID of the blog post containing the comment if the comment is on a blog post.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/BodySingle"
          },
          "id": {
            "description": "ID of the comment.",
            "type": "string"
          },
          "likes": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Like"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "operations": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "pageId": {
            "description": "ID of the page containing the comment if the comment is on a page.",
            "type": "string"
          },
          "parentCommentId": {
            "description": "ID of the parent comment if the comment is a reply.",
            "type": "string"
          },
          "properties": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "inlineMarkerRef": {
                "description": "Property value used to reference the highlighted element in DOM.",
                "type": "string"
              },
              "inlineOriginalSelection": {
                "description": "Text that is highlighted.",
                "type": "string"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/ContentProperty"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "resolutionLastModifiedAt": {
            "description": "Timestamp of the last modification to the comment's resolution status. Null until comment is resolved or reopened.",
            "format": "date-time",
            "type": "string"
          },
          "resolutionLastModifierId": {
            "description": "Atlassian Account ID of last person who modified the resolve state of the comment. Null until comment is resolved or reopened.",
            "type": "string"
          },
          "resolutionStatus": {
            "$ref": "#/components/schemas/InlineCommentResolutionStatus"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the comment.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "versions": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Version"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "InlineCommentProperties": {
        "properties": {
          "inlineMarkerRef": {
            "description": "Property value used to reference the highlighted element in DOM.",
            "type": "string"
          },
          "inlineOriginalSelection": {
            "description": "Text that is highlighted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InlineCommentResolutionStatus": {
        "description": "Inline comment resolution status",
        "enum": [
          "open",
          "reopened",
          "resolved",
          "dangling"
        ],
        "type": "string"
      },
      "Label": {
        "properties": {
          "id": {
            "description": "ID of the label.",
            "type": "string"
          },
          "name": {
            "description": "Name of the label.",
            "type": "string"
          },
          "prefix": {
            "description": "Prefix of the label.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LabelSortOrder": {
        "description": "The sort fields for labels. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.",
        "enum": [
          "created-date",
          "-created-date",
          "id",
          "-id",
          "name",
          "-name"
        ],
        "type": "string"
      },
      "Like": {
        "properties": {
          "accountId": {
            "description": "Account ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultiEntityLinks": {
        "properties": {
          "base": {
            "description": "Base url of the Confluence site.",
            "type": "string"
          },
          "next": {
            "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OnlyArchivedAndCurrentContentStatus": {
        "description": "The status of the content.",
        "enum": [
          "current",
          "archived"
        ],
        "type": "string"
      },
      "Operation": {
        "properties": {
          "operation": {
            "description": "The type of operation.",
            "type": "string"
          },
          "targetType": {
            "description": "The type of entity the operation type targets.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OptionalFieldLinks": {
        "properties": {
          "self": {
            "description": "A relative URL that can be used to fetch results beyond what this include parameter retrieves.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OptionalFieldMeta": {
        "properties": {
          "cursor": {
            "description": "A token that can be used in the query parameter of the endpoint returned in the `_links` property to retrieve the next set of results.",
            "type": "string"
          },
          "hasMore": {
            "description": "Indicates if there are more available results that can be fetched.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PageBodyWrite": {
        "properties": {
          "representation": {
            "description": "Type of content representation used for the value field.",
            "enum": [
              "storage",
              "atlas_doc_format",
              "wiki"
            ],
            "type": "string"
          },
          "value": {
            "description": "Body of the page, in the format found in the representation field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PageBulk": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/AbstractPageLinks"
          },
          "authorId": {
            "description": "The account ID of the user who created this page originally.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "createdAt": {
            "description": "Date and time when the page was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of the page.",
            "type": "string"
          },
          "lastOwnerId": {
            "description": "The account ID of the user who owned this page previously, or null if there is no previous owner.",
            "nullable": true,
            "type": "string"
          },
          "ownerId": {
            "description": "The account ID of the user who owns this page.",
            "nullable": true,
            "type": "string"
          },
          "parentId": {
            "description": "ID of the parent page, or null if there is no parent page.",
            "type": "string"
          },
          "parentType": {
            "$ref": "#/components/schemas/ParentContentType"
          },
          "position": {
            "description": "Position of child page within the given parent page tree.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "spaceId": {
            "description": "ID of the space the page is in.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the page.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "PageCommentModel": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "id": {
            "description": "ID of the comment.",
            "type": "string"
          },
          "pageId": {
            "description": "ID of the page the comment is in.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the comment.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "PageInlineCommentModel": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "id": {
            "description": "ID of the comment.",
            "type": "string"
          },
          "pageId": {
            "description": "ID of the page the comment is in.",
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/InlineCommentProperties"
          },
          "resolutionStatus": {
            "$ref": "#/components/schemas/InlineCommentResolutionStatus"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the comment.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "PageNestedBodyWrite": {
        "description": "Body of the page. Only one body format should be specified as the property\nfor this object, e.g. `storage`.",
        "properties": {
          "atlas_doc_format": {
            "$ref": "#/components/schemas/PageBodyWrite"
          },
          "storage": {
            "$ref": "#/components/schemas/PageBodyWrite"
          },
          "wiki": {
            "$ref": "#/components/schemas/PageBodyWrite"
          }
        },
        "type": "object"
      },
      "PageSingle": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/AbstractPageLinks"
          },
          "authorId": {
            "description": "The account ID of the user who created this page originally.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/BodySingle"
          },
          "createdAt": {
            "description": "Date and time when the page was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of the page.",
            "type": "string"
          },
          "isFavoritedByCurrentUser": {
            "description": "Whether the page has been favorited by the current user.",
            "type": "boolean"
          },
          "labels": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Label"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "lastOwnerId": {
            "description": "The account ID of the user who owned this page previously, or null if there is no previous owner.",
            "nullable": true,
            "type": "string"
          },
          "likes": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Like"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "operations": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "ownerId": {
            "description": "The account ID of the user who owns this page.",
            "nullable": true,
            "type": "string"
          },
          "parentId": {
            "description": "ID of the parent page, or null if there is no parent page.",
            "type": "string"
          },
          "parentType": {
            "$ref": "#/components/schemas/ParentContentType"
          },
          "position": {
            "description": "Position of child page within the given parent page tree.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "properties": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/ContentProperty"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "spaceId": {
            "description": "ID of the space the page is in.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the page.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "versions": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Version"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "PageSortOrder": {
        "description": "The sort fields for pages. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.",
        "enum": [
          "id",
          "-id",
          "created-date",
          "-created-date",
          "modified-date",
          "-modified-date",
          "title",
          "-title"
        ],
        "type": "string"
      },
      "PageVersion": {
        "properties": {
          "authorId": {
            "description": "The account ID of the user who created this version.",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "description": "Message associated with the current version.",
            "type": "string"
          },
          "minorEdit": {
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.",
            "type": "boolean"
          },
          "number": {
            "description": "The version number.",
            "format": "int32",
            "type": "integer"
          },
          "page": {
            "$ref": "#/components/schemas/VersionedEntity"
          }
        },
        "type": "object"
      },
      "ParentContentType": {
        "description": "Content type of the parent, or null if there is no parent.",
        "enum": [
          "page",
          "whiteboard",
          "database",
          "embed",
          "folder"
        ],
        "type": "string"
      },
      "PermittedOperationsResponse": {
        "description": "The list of operations permitted on entity.",
        "properties": {
          "operations": {
            "items": {
              "$ref": "#/components/schemas/Operation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PrimaryBodyRepresentation": {
        "description": "The primary formats a body can be represented as. A subset of BodyRepresentation. These formats are the only allowed formats in certain use cases.",
        "enum": [
          "storage",
          "atlas_doc_format"
        ],
        "type": "string"
      },
      "PrimaryBodyRepresentationSingle": {
        "description": "The primary formats a body can be represented as. A subset of BodyRepresentation. These formats are the only allowed formats in certain use cases.",
        "enum": [
          "storage",
          "atlas_doc_format",
          "view",
          "export_view",
          "anonymous_export_view",
          "styled_view",
          "editor"
        ],
        "type": "string"
      },
      "Principal": {
        "description": "The principal of the role assignment.",
        "properties": {
          "principalId": {
            "description": "The principal ID.",
            "type": "string"
          },
          "principalType": {
            "$ref": "#/components/schemas/PrincipalType"
          }
        },
        "type": "object"
      },
      "PrincipalType": {
        "description": "The principal type.",
        "enum": [
          "USER",
          "GROUP",
          "ACCESS_CLASS"
        ],
        "type": "string"
      },
      "RoleType": {
        "description": "The role type.",
        "enum": [
          "SYSTEM",
          "CUSTOM"
        ],
        "type": "string"
      },
      "SmartLinkLinks": {
        "properties": {
          "webui": {
            "description": "Web UI link of the content.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SmartLinkSingle": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/SmartLinkLinks"
          },
          "authorId": {
            "description": "The account ID of the user who created this Smart Link in the content tree originally.",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time when the Smart Link in the content tree was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "embedUrl": {
            "description": "The embedded URL of the Smart Link. If the Smart Link does not have an embedded URL, this property will not be included in the response.",
            "type": "string"
          },
          "id": {
            "description": "ID of the Smart Link in the content tree.",
            "type": "string"
          },
          "ownerId": {
            "description": "The account ID of the user who owns this Smart Link in the content tree.",
            "type": "string"
          },
          "parentId": {
            "description": "ID of the parent content, or null if there is no parent content.",
            "type": "string"
          },
          "parentType": {
            "$ref": "#/components/schemas/ParentContentType"
          },
          "position": {
            "description": "Position of the Smart Link within the given parent page tree.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the Smart Link in the content tree.",
            "type": "string"
          },
          "type": {
            "description": "The content type of the object.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "SpaceBulk": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/SpaceLinks"
          },
          "authorId": {
            "description": "The account ID of the user who created this space originally.",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time when the space was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/SpaceDescription"
          },
          "homepageId": {
            "description": "ID of the space's homepage.",
            "type": "string"
          },
          "icon": {
            "$ref": "#/components/schemas/SpaceIcon"
          },
          "id": {
            "description": "ID of the space.",
            "type": "string"
          },
          "key": {
            "description": "Key of the space.",
            "type": "string"
          },
          "name": {
            "description": "Name of the space.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SpaceStatus"
          },
          "type": {
            "$ref": "#/components/schemas/SpaceType"
          }
        },
        "type": "object"
      },
      "SpaceDescription": {
        "description": "Contains fields for each representation type requested.",
        "properties": {
          "plain": {
            "$ref": "#/components/schemas/BodyType"
          },
          "view": {
            "$ref": "#/components/schemas/BodyType"
          }
        },
        "type": "object"
      },
      "SpaceDescriptionBodyRepresentation": {
        "description": "The formats a space description can be represented as. A subset of BodyRepresentation.",
        "enum": [
          "plain",
          "view"
        ],
        "type": "string"
      },
      "SpaceIcon": {
        "description": "The icon of the space",
        "properties": {
          "apiDownloadLink": {
            "description": "The path (relative to base URL) that can be used to retrieve a link to download the space icon. 3LO apps should use this link instead of the value provided\nin the `path` property to retrieve the icon.\n\nCurrently this field is only returned for `global` spaces and not `personal` spaces.\n",
            "type": "string"
          },
          "path": {
            "description": "The path (relative to base URL) at which the space's icon can be retrieved. The format should be like `/wiki/download/...` or `/wiki/aa-avatar/...`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SpaceLinks": {
        "properties": {
          "webui": {
            "description": "Web UI link of the space.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SpacePermission": {
        "properties": {
          "description": {
            "description": "Describes the space permission’s usage.",
            "type": "string"
          },
          "displayName": {
            "description": "The display name for the space permission.",
            "type": "string"
          },
          "id": {
            "description": "The identifier for the space permission.",
            "type": "string"
          },
          "requiredPermissionIds": {
            "description": "The permissions required for this permission to be enabled.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SpacePermissionAssignment": {
        "properties": {
          "id": {
            "description": "ID of the space permission.",
            "type": "string"
          },
          "operation": {
            "description": "The operation the space permission corresponds to.",
            "properties": {
              "key": {
                "description": "The type of operation.",
                "enum": [
                  "use",
                  "create",
                  "read",
                  "update",
                  "delete",
                  "copy",
                  "move",
                  "export",
                  "purge",
                  "purge_version",
                  "administer",
                  "restore",
                  "create_space",
                  "restrict_content",
                  "archive"
                ],
                "type": "string"
              },
              "targetType": {
                "description": "The type of entity the operation type targets.",
                "enum": [
                  "page",
                  "blogpost",
                  "comment",
                  "attachment",
                  "whiteboard",
                  "database",
                  "embed",
                  "folder",
                  "space",
                  "application",
                  "userProfile"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "principal": {
            "description": "The entity the space permissions corresponds to.",
            "properties": {
              "id": {
                "description": "ID of the entity.",
                "type": "string"
              },
              "type": {
                "enum": [
                  "user",
                  "group",
                  "role"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SpaceProperty": {
        "properties": {
          "createdAt": {
            "description": "RFC3339 compliant date time at which the property was created.",
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "description": "Atlassian account ID of the user that created the space property.",
            "type": "string"
          },
          "id": {
            "description": "ID of the space property.",
            "type": "string"
          },
          "key": {
            "description": "Key of the space property.",
            "type": "string"
          },
          "value": {
            "description": "Value of the space property."
          },
          "version": {
            "properties": {
              "createdAt": {
                "description": "RFC3339 compliant date time at which the property's current version was created.",
                "format": "date-time",
                "type": "string"
              },
              "createdBy": {
                "description": "Atlassian account ID of the user that created the space property's current version.",
                "type": "string"
              },
              "message": {
                "description": "Message associated with the current version.",
                "type": "string"
              },
              "number": {
                "description": "The space property's current version number.",
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SpacePropertyCreateRequest": {
        "properties": {
          "key": {
            "description": "Key of the space property",
            "type": "string"
          },
          "value": {
            "description": "Value of the space property."
          }
        },
        "type": "object"
      },
      "SpacePropertyUpdateRequest": {
        "properties": {
          "key": {
            "description": "Key of the space property",
            "type": "string"
          },
          "value": {
            "description": "Value of the space property."
          },
          "version": {
            "description": "New version number and associated message",
            "properties": {
              "message": {
                "description": "Message to be associated with the new version.",
                "type": "string"
              },
              "number": {
                "description": "Version number of the new version. Should be 1 more than the current version number.",
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SpaceRole": {
        "properties": {
          "description": {
            "description": "The description for the space role’s usage.",
            "type": "string"
          },
          "displayName": {
            "description": "The display name for the space role.",
            "type": "string"
          },
          "id": {
            "description": "The identifier for the space role.",
            "type": "string"
          },
          "spacePermissions": {
            "description": "The space permissions the space role is comprised of.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "$ref": "#/components/schemas/RoleType"
          }
        },
        "type": "object"
      },
      "SpaceRoleAssignment": {
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/Principal"
          },
          "roleId": {
            "description": "The role to which the principal is assigned.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SpaceSingle": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/SpaceLinks"
          },
          "authorId": {
            "description": "The account ID of the user who created this space originally.",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time when the space was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/SpaceDescription"
          },
          "homepageId": {
            "description": "ID of the space's homepage.",
            "type": "string"
          },
          "icon": {
            "$ref": "#/components/schemas/SpaceIcon"
          },
          "id": {
            "description": "ID of the space.",
            "type": "string"
          },
          "key": {
            "description": "Key of the space.",
            "type": "string"
          },
          "labels": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Label"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "name": {
            "description": "Name of the space.",
            "type": "string"
          },
          "operations": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "permissions": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/SpacePermissionAssignment"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "properties": {
            "properties": {
              "_links": {
                "$ref": "#/components/schemas/OptionalFieldLinks"
              },
              "meta": {
                "$ref": "#/components/schemas/OptionalFieldMeta"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/SpaceProperty"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "status": {
            "$ref": "#/components/schemas/SpaceStatus"
          },
          "type": {
            "$ref": "#/components/schemas/SpaceType"
          }
        },
        "type": "object"
      },
      "SpaceSortOrder": {
        "description": "The sort fields for spaces. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.",
        "enum": [
          "id",
          "-id",
          "key",
          "-key",
          "name",
          "-name"
        ],
        "type": "string"
      },
      "SpaceStatus": {
        "description": "The status of the space.",
        "enum": [
          "current",
          "archived"
        ],
        "type": "string"
      },
      "SpaceType": {
        "description": "The type of space.",
        "enum": [
          "global",
          "collaboration",
          "knowledge_base",
          "personal"
        ],
        "type": "string"
      },
      "Task": {
        "properties": {
          "assignedTo": {
            "description": "Account ID of the user to whom this task is assigned.",
            "type": "string"
          },
          "blogPostId": {
            "description": "ID of the blog post the task is in.",
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/TaskBodySingle"
          },
          "completedAt": {
            "description": "Date and time when the task was completed. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "completedBy": {
            "description": "Account ID of the user who completed this task.",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time when the task was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "description": "Account ID of the user who created this task.",
            "type": "string"
          },
          "dueAt": {
            "description": "Date and time when the task is due. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of the task.",
            "type": "string"
          },
          "localId": {
            "description": "Local ID of the task. This ID is local to the corresponding page or blog post.",
            "type": "string"
          },
          "pageId": {
            "description": "ID of the page the task is in.",
            "type": "string"
          },
          "spaceId": {
            "description": "ID of the space the task is in.",
            "type": "string"
          },
          "status": {
            "description": "Status of the task.",
            "enum": [
              "complete",
              "incomplete"
            ],
            "type": "string"
          },
          "updatedAt": {
            "description": "Date and time when the task was updated. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaskBodySingle": {
        "description": "Contains fields for each representation type requested.",
        "properties": {
          "atlas_doc_format": {
            "$ref": "#/components/schemas/BodyType"
          },
          "storage": {
            "$ref": "#/components/schemas/BodyType"
          }
        },
        "type": "object"
      },
      "UpdateFooterCommentModel": {
        "properties": {
          "body": {
            "$ref": "#/components/schemas/CommentBodyWrite"
          },
          "version": {
            "properties": {
              "message": {
                "description": "Optional message store for the new version.",
                "type": "string"
              },
              "number": {
                "description": "Number of new version. Should be 1 higher than current version of the comment.",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "UpdateInlineCommentModel": {
        "properties": {
          "body": {
            "$ref": "#/components/schemas/CommentBodyWrite"
          },
          "resolved": {
            "description": "Resolved state of the comment. Set to true to resolve the comment, set to false to reopen it. If\nmatching the existing state (i.e. true -\u003e resolved or false -\u003e open/reopened) , no change will occur. A dangling\ncomment cannot be updated.",
            "type": "boolean"
          },
          "version": {
            "properties": {
              "message": {
                "description": "Optional message store for the new version.",
                "type": "string"
              },
              "number": {
                "description": "Number of new version. Should be 1 higher than current version of the comment.",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "User": {
        "properties": {
          "accountId": {
            "description": "Account ID of the user.",
            "type": "string"
          },
          "accountStatus": {
            "$ref": "#/components/schemas/AccountStatus"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "displayName": {
            "description": "Display name of the user.",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user. Depending on the user's privacy setting, this may return an empty string.",
            "type": "string"
          },
          "isExternalCollaborator": {
            "description": "Whether the user is an external collaborator.",
            "type": "boolean"
          },
          "personalSpaceId": {
            "description": "Space ID of the user's personal space. Returns null, if no personal space for the user.",
            "type": "string"
          },
          "profilePicture": {
            "$ref": "#/components/schemas/Icon"
          },
          "publicName": {
            "description": "Public name of the user.",
            "type": "string"
          },
          "timeZone": {
            "description": "Time zone of the user. Depending on the user's privacy\nsetting, this may return null.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Version": {
        "properties": {
          "authorId": {
            "description": "The account ID of the user who created this version.",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "description": "Message associated with the current version.",
            "type": "string"
          },
          "minorEdit": {
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.",
            "type": "boolean"
          },
          "number": {
            "description": "The version number.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VersionSortOrder": {
        "description": "The sort fields for versions. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.",
        "enum": [
          "modified-date",
          "-modified-date"
        ],
        "type": "string"
      },
      "VersionedEntity": {
        "properties": {
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "id": {
            "description": "ID of the entity.",
            "type": "string"
          },
          "title": {
            "description": "Title of the entity.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WhiteboardLinks": {
        "properties": {
          "editui": {
            "description": "Edit UI link of the content.",
            "type": "string"
          },
          "webui": {
            "description": "Web UI link of the content.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WhiteboardSingle": {
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/WhiteboardLinks"
          },
          "authorId": {
            "description": "The account ID of the user who created this whiteboard originally.",
            "type": "string"
          },
          "createdAt": {
            "description": "Date and time when the whiteboard was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of the whiteboard.",
            "type": "string"
          },
          "ownerId": {
            "description": "The account ID of the user who owns this whiteboard.",
            "type": "string"
          },
          "parentId": {
            "description": "ID of the parent content, or null if there is no parent content.",
            "type": "string"
          },
          "parentType": {
            "$ref": "#/components/schemas/ParentContentType"
          },
          "position": {
            "description": "Position of the whiteboard within the given parent page tree.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "description": "Title of the whiteboard.",
            "type": "string"
          },
          "type": {
            "description": "The content type of the object.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "description": "You can access this resource via basic auth.",
        "scheme": "basic",
        "type": "http"
      },
      "oAuthDefinitions": {
        "description": "This API uses OAuth 2 with the authorizationCode grant flow.",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.atlassian.com/authorize",
            "scopes": {
              "delete:comment:confluence": "Delete comments.",
              "delete:custom-content:confluence": "Delete custom content.",
              "delete:database:confluence": "Delete databases.",
              "delete:embed:confluence": "Delete Smart Links in the content tree.",
              "delete:folder:confluence": "Delete folders.",
              "delete:page:confluence": "Delete pages and blog posts.",
              "delete:whiteboard:confluence": "Delete whiteboards.",
              "read:attachment:confluence": "View attachments and their properties.",
              "read:comment:confluence": "View comments and their properties.",
              "read:custom-content:confluence": "View custom content and their properties.",
              "read:database:confluence": "View databases and their properties.",
              "read:embed:confluence": "View Smart Links in the content tree and their properties.",
              "read:folder:confluence": "View folders and their properties.",
              "read:page:confluence": "View pages and blogposts and their properties.",
              "read:space:confluence": "View spaces and their properties.",
              "read:task:confluence": "View tasks.",
              "read:whiteboard:confluence": "View whiteboards and their properties.",
              "write:comment:confluence": "Create and update comments and their properties.",
              "write:custom-content:confluence": "Create and update custom content and their properties.",
              "write:database:confluence": "Create and update databases and their properties.",
              "write:embed:confluence": "Create and update Smart Links in the content tree and their properties.",
              "write:folder:confluence": "Create and update folders and their properties.",
              "write:page:confluence": "Create and update pages and blog posts and their properties.",
              "write:space:confluence": "Create and update spaces and their properties.",
              "write:whiteboard:confluence": "Create and update whiteboards and their properties."
            },
            "tokenUrl": "https://auth.atlassian.com/oauth/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "externalDocs": {
    "description": "The online and complete version of the Confluence Cloud REST API docs.",
    "url": "https://developer.atlassian.com/cloud/confluence/rest/v2"
  },
  "info": {
    "description": "This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.",
    "termsOfService": "https://developer.atlassian.com/platform/marketplace/atlassian-developer-terms/",
    "title": "The Confluence Cloud REST API v2",
    "version": "2.0.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/attachments": {
      "get": {
        "description": "Returns all attachments. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the container of the attachment.",
        "operationId": "getAttachments",
        "parameters": [
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AttachmentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the results to attachments based on their status. By default, `current` and `archived` are used.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "archived",
                  "trashed"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filters on the mediaType of attachments. Only one may be specified.",
            "in": "query",
            "name": "mediaType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filters on the file-name of attachments. Only one may be specified.",
            "in": "query",
            "name": "filename",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 50,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/AttachmentBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cAttachment\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested attachments are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information.  Example response header format: `Link: \u003c/wiki/api/v2/attachments?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "summary": "Get attachments",
        "tags": [
          "Attachment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/attachments/{attachment-id}/properties": {
      "get": {
        "description": "Retrieves all Content Properties tied to a specified attachment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the attachment.",
        "operationId": "getAttachmentContentProperties",
        "parameters": [
          {
            "description": "The ID of the attachment for which content properties should be returned.",
            "in": "path",
            "name": "attachment-id",
            "required": true,
            "schema": {
              "pattern": "(att)?[0-9]+",
              "type": "string"
            }
          },
          {
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cContentProperty\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested content properties are successfully retrieved.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/attachments/\u003cattachment-id\u003e/properties?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified attachment or the attachment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "summary": "Get content properties for attachment",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a new content property for an attachment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the attachment.",
        "operationId": "createAttachmentProperty",
        "parameters": [
          {
            "description": "The ID of the attachment to create a property for.",
            "in": "path",
            "name": "attachment-id",
            "required": true,
            "schema": {
              "pattern": "(att)?[0-9]+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "description": "The content property to be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was created successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified attachment or the attachment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence",
              "write:attachment:confluence"
            ]
          }
        ],
        "summary": "Create content property for attachment",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence",
              "write:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/attachments/{attachment-id}/properties/{property-id}": {
      "delete": {
        "description": "Deletes a content property for an attachment by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to attachment the page.",
        "operationId": "deleteAttachmentPropertyById",
        "parameters": [
          {
            "description": "The ID of the attachment the property belongs to.",
            "in": "path",
            "name": "attachment-id",
            "required": true,
            "schema": {
              "pattern": "(att)?[0-9]+",
              "type": "string"
            }
          },
          {
            "description": "The ID of the property to be deleted.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified attachment or the attachment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence",
              "write:attachment:confluence"
            ]
          }
        ],
        "summary": "Delete content property for attachment by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence",
              "write:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Retrieves a specific Content Property by ID that is attached to a specified attachment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the attachment.",
        "operationId": "getAttachmentContentPropertiesById",
        "parameters": [
          {
            "description": "The ID of the attachment for which content properties should be returned.",
            "in": "path",
            "name": "attachment-id",
            "required": true,
            "schema": {
              "pattern": "(att)?0-9+",
              "type": "string"
            }
          },
          {
            "description": "The ID of the content property to be returned",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the requested content property is successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified attachment,the attachment was not found, or the property was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "summary": "Get content property for attachment by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a content property for attachment by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the attachment.",
        "operationId": "updateAttachmentPropertyById",
        "parameters": [
          {
            "description": "The ID of the attachment the property belongs to.",
            "in": "path",
            "name": "attachment-id",
            "required": true,
            "schema": {
              "pattern": "(att)?[0-9]+",
              "type": "string"
            }
          },
          {
            "description": "The ID of the property to be updated.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "description": "The content property to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was updated successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified attachment or the attachment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence",
              "write:attachment:confluence"
            ]
          }
        ],
        "summary": "Update content property for attachment by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence",
              "write:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/attachments/{attachment-id}/versions/{version-number}": {
      "get": {
        "description": "Retrieves version details for the specified attachment and version number.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the attachment.",
        "operationId": "getAttachmentVersionDetails",
        "parameters": [
          {
            "description": "The ID of the attachment for which version details should be returned.",
            "in": "path",
            "name": "attachment-id",
            "required": true,
            "schema": {
              "pattern": "(att)?0-9+",
              "type": "string"
            }
          },
          {
            "description": "The version number of the attachment to be returned.",
            "in": "path",
            "name": "version-number",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedVersion"
                }
              }
            },
            "description": "Returned if the requested version details are successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified attachment, the attachment was not found, or the version number does not exist."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "summary": "Get version details for attachment version",
        "tags": [
          "Version"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/attachments/{id}": {
      "delete": {
        "description": "Delete an attachment by id.\n\nDeleting an attachment moves the attachment to the trash, where it can be restored later. To permanently delete an attachment (or \"purge\" it),\nthe endpoint must be called on a **trashed** attachment with the following param `purge=true`.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the container of the attachment.\nPermission to delete attachments in the space.\nPermission to administer the space (if attempting to purge).",
        "operationId": "deleteAttachment",
        "parameters": [
          {
            "description": "The ID of the attachment to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "If attempting to purge the attachment.",
            "in": "query",
            "name": "purge",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Returned if the attachment was successfully deleted."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- The provided attachment does not exist\n- The user does not have permissions to view the container of the attachment\n- The user does not have the needed permissions to delete an attachment in the space"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:attachment:confluence"
            ]
          }
        ],
        "summary": "Delete attachment",
        "tags": [
          "Attachment"
        ],
        "x-atlassian-connect-scope": "DELETE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "delete:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Returns a specific attachment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the attachment's container.",
        "operationId": "getAttachmentById",
        "parameters": [
          {
            "description": "The ID of the attachment to be returned. If you don't know the attachment's ID, use Get attachments for page/blogpost/custom content.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "pattern": "(att)?[0-9]+",
              "type": "string"
            }
          },
          {
            "description": "Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Includes labels associated with this attachment in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-labels",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes content properties associated with this attachment in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-properties",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes operations associated with this attachment in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-operations",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes versions associated with this attachment in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-versions",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes the current version associated with this attachment in the response.\nBy default this is included and can be omitted by setting the value to `false`.",
            "in": "query",
            "name": "include-version",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AttachmentSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested attachment is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested attachment or the attachment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "summary": "Get attachment by id",
        "tags": [
          "Attachment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/attachments/{id}/footer-comments": {
      "get": {
        "description": "Returns the comments of the specific attachment.\nThe number of results is limited by the `limit` parameter and additional results (if available) will be available through\nthe `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the attachment and its corresponding containers.",
        "operationId": "getAttachmentComments",
        "parameters": [
          {
            "description": "The ID of the attachment for which comments should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "pattern": "(att)?[0-9]+",
              "type": "string"
            }
          },
          {
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "description": "Version number of the attachment to retrieve comments for. If no version provided, retrieves comments for the latest version.",
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/AttachmentCommentModel"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cAttachmentCommentModel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the attachment comments were successfully retrieved",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/attachments/\u003cid\u003e/comments?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nattachment or associated containers."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get attachment comments",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/attachments/{id}/labels": {
      "get": {
        "description": "Returns the labels of specific attachment. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the attachment and its corresponding space.\nOnly labels that the user has permission to view will be returned.",
        "operationId": "getAttachmentLabels",
        "parameters": [
          {
            "description": "The ID of the attachment for which labels should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filter the results to labels based on their prefix.",
            "in": "query",
            "name": "prefix",
            "required": false,
            "schema": {
              "enum": [
                "my",
                "team",
                "global",
                "system"
              ],
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/LabelSortOrder"
              },
              "type": "string"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cLabel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested labels are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/attachments/\u003cid\u003e/labels?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested attachment or the attachment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "summary": "Get labels for attachment",
        "tags": [
          "Label"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/attachments/{id}/operations": {
      "get": {
        "description": "Returns the permitted operations on specific attachment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the attachment and its corresponding space.",
        "operationId": "getAttachmentOperations",
        "parameters": [
          {
            "description": "The ID of the attachment for which operations should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "pattern": "(att)?[0-9]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            },
            "description": "Returned if the requested operations are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested attachment or the attachment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "summary": "Get permitted operations for attachment",
        "tags": [
          "Operation"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/attachments/{id}/versions": {
      "get": {
        "description": "Returns the versions of specific attachment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the attachment and its corresponding space.",
        "operationId": "getAttachmentVersions",
        "parameters": [
          {
            "description": "The ID of the attachment to be queried for its versions. If you don't know the attachment ID, use Get attachments and filter the results.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "pattern": "(att)?[0-9]+",
              "type": "string"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/VersionSortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/AttachmentVersion"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cVersion\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested attachment versions are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/attachments/\u003cid\u003e/versions?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "summary": "Get attachment versions",
        "tags": [
          "Version"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts": {
      "get": {
        "description": "Returns all blog posts. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nOnly blog posts that the user has permission to view will be returned.",
        "operationId": "getBlogPosts",
        "parameters": [
          {
            "description": "Filter the results based on blog post ids. Multiple blog post ids can be specified as a comma-separated list.",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.",
            "in": "query",
            "name": "space-id",
            "required": false,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 100,
              "type": "array"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/BlogPostSortOrder"
            }
          },
          {
            "description": "Filter the results to blog posts based on their status. By default, `current` is used.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "deleted",
                  "trashed"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter the results to blog posts based on their title.",
            "in": "query",
            "name": "title",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of blog posts per result to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/BlogPostBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cBlogPost\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested blog posts are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/blogposts?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get blog posts",
        "tags": [
          "Blog Post"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a new blog post in the space specified by the spaceId.\n\nBy default this will create the blog post as a non-draft, unless the status is specified as draft.\nIf creating a non-draft, the title must not be empty.\n\nCurrently only supports the storage representation specified in the body.representation enums below",
        "operationId": "createBlogPost",
        "parameters": [
          {
            "description": "The blog post will be private. Only the user who creates this blog post will have permission to view and edit one.",
            "in": "query",
            "name": "private",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BlogPostCreateRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BlogPostSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the blog post was created successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if invalid values were passed in for any of the enums, a REQUIRED parameter was missing, or if the given title is a duplicate in the space"
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing from the request"
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- The provided space does not exist\n- The user does not have permissions to view the space\n- The user does not have the needed permissions to create a blog post in the provided space"
          },
          "413": {
            "content": {},
            "description": "Returned if the request is too large in size (over 5 MB)"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Create blog post",
        "tags": [
          "Blog Post"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{blogpost-id}/properties": {
      "get": {
        "description": "Retrieves all Content Properties tied to a specified blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post.",
        "operationId": "getBlogpostContentProperties",
        "parameters": [
          {
            "description": "The ID of the blog post for which content properties should be returned.",
            "in": "path",
            "name": "blogpost-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cContentProperty\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested content properties are successfully retrieved.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/blogposts/\u003cblogpost-id\u003e/properties?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified blog post or the blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get content properties for blog post",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a new property for a blogpost.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the blog post.",
        "operationId": "createBlogpostProperty",
        "parameters": [
          {
            "description": "The ID of the blog post to create a property for.",
            "in": "path",
            "name": "blogpost-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "description": "The content property to be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was created successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified blog post or the blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Create content property for blog post",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{blogpost-id}/properties/{property-id}": {
      "delete": {
        "description": "Deletes a content property for a blogpost by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the blog post.",
        "operationId": "deleteBlogpostPropertyById",
        "parameters": [
          {
            "description": "The ID of the blog post the property belongs to.",
            "in": "path",
            "name": "blogpost-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be deleted.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified blog post or the blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Delete content property for blogpost by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Retrieves a specific Content Property by ID that is attached to a specified blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post.",
        "operationId": "getBlogpostContentPropertiesById",
        "parameters": [
          {
            "description": "The ID of the blog post for which content properties should be returned.",
            "in": "path",
            "name": "blogpost-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property being requested",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the requested content property is successfully retrieved.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/blogposts/\u003cblogpost-id\u003e/properties/\u003cproperty-id\u003e?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified blog post,the blog post was not found, or the property was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get content property for blog post by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a content property for blog post by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the blog post.",
        "operationId": "updateBlogpostPropertyById",
        "parameters": [
          {
            "description": "The ID of the blog post the property belongs to.",
            "in": "path",
            "name": "blogpost-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be updated.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "description": "The content property to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was updated successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified blog post or the blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Update content property for blog post by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{blogpost-id}/versions/{version-number}": {
      "get": {
        "description": "Retrieves version details for the specified blog post and version number.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post.",
        "operationId": "getBlogPostVersionDetails",
        "parameters": [
          {
            "description": "The ID of the blog post for which version details should be returned.",
            "in": "path",
            "name": "blogpost-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The version number of the blog post to be returned.",
            "in": "path",
            "name": "version-number",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedVersion"
                }
              }
            },
            "description": "Returned if the requested version details are successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified blog post, the blog post was not found, or the version number does not exist."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get version details for blog post version",
        "tags": [
          "Version"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{id}": {
      "delete": {
        "description": "Delete a blog post by id.\n\nBy default this will delete blog posts that are non-drafts. To delete a blog post that is a draft, the endpoint must be called on a \ndraft with the following param `draft=true`. Discarded drafts are not sent to the trash and are permanently deleted.\n\nDeleting a blog post that is not a draft moves the blog post to the trash, where it can be restored later.\nTo permanently delete a blog post (or \"purge\" it), the endpoint must be called on a **trashed** blog post with the following param `purge=true`.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post and its corresponding space.\nPermission to delete blog posts in the space.\nPermission to administer the space (if attempting to purge).",
        "operationId": "deleteBlogPost",
        "parameters": [
          {
            "description": "The ID of the blog post to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "If attempting to purge the blog post.",
            "in": "query",
            "name": "purge",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "If attempting to delete a blog post that is a draft.",
            "in": "query",
            "name": "draft",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Returned if the blog post was successfully deleted."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- The provided blog post does not exist\n- The user does not have permissions to view the blog post\n- The user does not have the needed permissions to delete a blog post in the space"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:page:confluence"
            ]
          }
        ],
        "summary": "Delete blog post",
        "tags": [
          "Blog Post"
        ],
        "x-atlassian-connect-scope": "DELETE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "delete:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Returns a specific blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post and its corresponding space.",
        "operationId": "getBlogPostById",
        "parameters": [
          {
            "description": "The ID of the blog post to be returned. If you don't know the blog post ID, use Get blog posts and filter the results.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentationSingle"
            }
          },
          {
            "description": "Retrieve the draft version of this blog post.",
            "in": "query",
            "name": "get-draft",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Filter the blog post being retrieved by its status.",
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "trashed",
                  "deleted",
                  "historical",
                  "draft"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Includes labels associated with this blog post in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-labels",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes content properties associated with this blog post in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-properties",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes operations associated with this blog post in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-operations",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes likes associated with this blog post in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-likes",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes versions associated with this blog post in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-versions",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes the current version associated with this blog post in the response.\nBy default this is included and can be omitted by setting the value to `false`.",
            "in": "query",
            "name": "include-version",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Includes whether this blog post has been favorited by the current user.",
            "in": "query",
            "name": "include-favorited-by-current-user-status",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes web resources that can be used to render blog post content on a client.",
            "in": "query",
            "name": "include-webresources",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BlogPostSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested blog post is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get blog post by id",
        "tags": [
          "Blog Post"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a blog post by id.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post and its corresponding space. Permission to update blog posts in the space.",
        "operationId": "updateBlogPost",
        "parameters": [
          {
            "description": "The ID of the blog post to be updated. If you don't know the blog post ID, use Get Blog Posts and filter the results.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BlogPostUpdateRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BlogPostSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested blog post is successfully updated."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- The provided blog post does not exist\n- The user does not have permissions to view the blog post\n- The user does not have the needed permissions to update a blog post in the space"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Update blog post",
        "tags": [
          "Blog Post"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{id}/attachments": {
      "get": {
        "description": "Returns the attachments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the blog post and its corresponding space.",
        "operationId": "getBlogpostAttachments",
        "parameters": [
          {
            "description": "The ID of the blog post for which attachments should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AttachmentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the results to attachments based on their status. By default, `current` and `archived` are used.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "archived",
                  "trashed"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filters on the mediaType of attachments. Only one may be specified.",
            "in": "query",
            "name": "mediaType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filters on the file-name of attachments. Only one may be specified.",
            "in": "query",
            "name": "filename",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 50,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/AttachmentBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cAttachment\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested attachments are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/blogposts/\u003cid\u003e/attachments?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "summary": "Get attachments for blog post",
        "tags": [
          "Attachment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{id}/classification-level": {
      "get": {
        "description": "Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)\nfor a specific blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and permission to view the blog post.\n'Permission to edit the blog post is required if trying to view classification level for a draft.",
        "operationId": "getBlogPostClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the blog post for which classification level should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Status of blog post from which classification level will fetched.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "default": "current",
              "enum": [
                "current",
                "draft",
                "archived"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationLevel"
                }
              }
            },
            "description": "Returned if the requested classification level for a blog post is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- Blog post does not have a classification level applied\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to view the specified blog post or the blog post was not found\n- The calling user does not have permission to edit the specified blog post when trying to fetch classification level for a draft"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Get blog post classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)\nfor a specific blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and permission to edit the blog post.",
        "operationId": "putBlogPostClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the blog post for which classification level should be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ContentClassificationLevelUpdateRequest"
        },
        "responses": {
          "204": {
            "description": "Returned if the classification level was successfully updated."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to edit the specified blog post or the blog post was not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Update blog post classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{id}/classification-level/reset": {
      "post": {
        "description": "Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)\nfor a specific blog post for the space  \n[default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and permission to view the blog post.",
        "operationId": "postBlogPostClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the blog post for which classification level should be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ContentClassificationLevelDeleteRequest"
        },
        "responses": {
          "204": {
            "description": "Returned if the classification level was successfully reset."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to edit the specified blog post or the blog post was not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Reset blog post classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{id}/custom-content": {
      "get": {
        "description": "Returns all custom content for a given type within a given blogpost. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content, the container of the custom content (blog post), and the corresponding space.",
        "operationId": "getCustomContentByTypeInBlogPost",
        "parameters": [
          {
            "description": "The ID of the blog post for which custom content should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CustomContentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.\n\nNote: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/CustomContentBodyRepresentation"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/CustomContentBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cCustomContent\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested custom content is returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/blogposts/{id}/custom-content?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the given blog post is not found. Returned if the type of custom content is not found. Note, this is distinct from the type being present, but no instances of the type, which would be a 200 with empty results."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "summary": "Get custom content by type in blog post",
        "tags": [
          "Custom Content"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{id}/footer-comments": {
      "get": {
        "description": "Returns the root footer comments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the blog post and its corresponding space.",
        "operationId": "getBlogPostFooterComments",
        "parameters": [
          {
            "description": "The ID of the blog post for which footer comments should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Filter the footer comment being retrieved by its status.",
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "deleted",
                  "trashed",
                  "historical",
                  "draft"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/BlogPostCommentModel"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cBlogPostCommentModel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested footer comments are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/blogposts/\u003cid\u003e/footer-comments?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get footer comments for blog post",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{id}/inline-comments": {
      "get": {
        "description": "Returns the root inline comments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the blog post and its corresponding space.",
        "operationId": "getBlogPostInlineComments",
        "parameters": [
          {
            "description": "The ID of the blog post for which inline comments should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Filter the inline comment being retrieved by its status.",
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "deleted",
                  "trashed",
                  "historical",
                  "draft"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter the inline comment being retrieved by its resolution status.",
            "in": "query",
            "name": "resolution-status",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "resolved",
                  "open",
                  "dangling",
                  "reopened"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of inline comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/BlogPostInlineCommentModel"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cBlogPostInlineCommentModel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested inline comments are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/blogposts/\u003cid\u003e/inline-comments?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get inline comments for blog post",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{id}/labels": {
      "get": {
        "description": "Returns the labels of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the blog post and its corresponding space.\nOnly labels that the user has permission to view will be returned.",
        "operationId": "getBlogPostLabels",
        "parameters": [
          {
            "description": "The ID of the blog post for which labels should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filter the results to labels based on their prefix.",
            "in": "query",
            "name": "prefix",
            "required": false,
            "schema": {
              "enum": [
                "my",
                "team",
                "global",
                "system"
              ],
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/LabelSortOrder"
              },
              "type": "string"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cLabel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested labels are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/blogposts/\u003cid\u003e/labels?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get labels for blog post",
        "tags": [
          "Label"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{id}/likes/count": {
      "get": {
        "description": "Returns the count of likes of specific blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the blog post and its corresponding space.",
        "operationId": "getBlogPostLikeCount",
        "parameters": [
          {
            "description": "The ID of the blog post for which like count should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "description": "The count number",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "title": "Integer",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested count is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get like count for blog post",
        "tags": [
          "Like"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{id}/likes/users": {
      "get": {
        "description": "Returns the account IDs of likes of specific blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the blog post and its corresponding space.",
        "operationId": "getBlogPostLikeUsers",
        "parameters": [
          {
            "description": "The ID of the blog post for which account IDs should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Like"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cString\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested account IDs are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/blogposts/\u003cid\u003e/likes/users?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get account IDs of likes for blog post",
        "tags": [
          "Like"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{id}/operations": {
      "get": {
        "description": "Returns the permitted operations on specific blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the blog post and its corresponding space.",
        "operationId": "getBlogPostOperations",
        "parameters": [
          {
            "description": "The ID of the blog post for which operations should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            },
            "description": "Returned if the requested operations are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested blog post or the blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get permitted operations for blog post",
        "tags": [
          "Operation"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/blogposts/{id}/versions": {
      "get": {
        "description": "Returns the versions of specific blog post. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post and its corresponding space.",
        "operationId": "getBlogPostVersions",
        "parameters": [
          {
            "description": "The ID of the blog post to be queried for its versions. If you don't know the blog post ID, use Get blog posts and filter the results.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/VersionSortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/BlogPostVersion"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cVersion\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested blog post versions are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/blogposts/\u003cid\u003e/versions?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get blog post versions",
        "tags": [
          "Version"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/classification-levels": {
      "get": {
        "description": "Returns a list of [classification levels](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) \navailable.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission).",
        "operationId": "getClassificationLevels",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ClassificationLevel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Returned if classifications levels are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- Classification levels do not exist\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permissions to access the Confluence site\n"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:configuration:confluence"
            ]
          }
        ],
        "summary": "Get list of classification levels",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:configuration:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/comments/{comment-id}/properties": {
      "get": {
        "description": "Retrieves Content Properties attached to a specified comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the comment.",
        "operationId": "getCommentContentProperties",
        "parameters": [
          {
            "description": "The ID of the comment for which content properties should be returned.",
            "in": "path",
            "name": "comment-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cContentProperty\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested content properties are successfully retrieved.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/comments/\u003ccomment-id\u003e/properties?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified comment or the comment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get content properties for comment",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a new content property for a comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the comment.",
        "operationId": "createCommentProperty",
        "parameters": [
          {
            "description": "The ID of the comment to create a property for.",
            "in": "path",
            "name": "comment-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "description": "The content property to be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was created successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence",
              "write:comment:confluence"
            ]
          }
        ],
        "summary": "Create content property for comment",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence",
              "write:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/comments/{comment-id}/properties/{property-id}": {
      "delete": {
        "description": "Deletes a content property for a comment by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the comment.",
        "operationId": "deleteCommentPropertyById",
        "parameters": [
          {
            "description": "The ID of the comment the property belongs to.",
            "in": "path",
            "name": "comment-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be deleted.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified comment or the comment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence",
              "write:comment:confluence"
            ]
          }
        ],
        "summary": "Delete content property for comment by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence",
              "write:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Retrieves a specific Content Property by ID that is attached to a specified comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the comment.",
        "operationId": "getCommentContentPropertiesById",
        "parameters": [
          {
            "description": "The ID of the comment for which content properties should be returned.",
            "in": "path",
            "name": "comment-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the content property being requested.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the requested content property is successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified comment, the comment was not found, or the property was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get content property for comment by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a content property for a comment by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the comment.",
        "operationId": "updateCommentPropertyById",
        "parameters": [
          {
            "description": "The ID of the comment the property belongs to.",
            "in": "path",
            "name": "comment-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be updated.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "description": "The content property to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was updated successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified comment or the comment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence",
              "write:comment:confluence"
            ]
          }
        ],
        "summary": "Update content property for comment by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence",
              "write:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/content/convert-ids-to-types": {
      "post": {
        "description": "Converts a list of content ids into their associated content types. This is useful for users migrating from v1 to v2\nwho may have stored just content ids without their associated type. This will return types as they should be used in v2.\nNotably, this will return `inline-comment` for inline comments and `footer-comment` for footer comments, which is distinct from them\nboth being represented by `comment` in v1.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the requested content. Any content that the user does not have permission to view or does not exist will map to `null` in the response.",
        "operationId": "convertContentIdsToContentTypes",
        "requestBody": {
          "$ref": "#/components/requestBodies/ContentIdToContentTypeRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentIdToContentTypeResponse"
                }
              }
            },
            "description": "Returned if the requested content ids are successfully converted to their content types"
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:content.metadata:confluence"
            ]
          }
        ],
        "summary": "Convert content ids to content types",
        "tags": [
          "Content"
        ],
        "x-atlassian-connect-scope": "NONE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:content.metadata:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/custom-content": {
      "get": {
        "description": "Returns all custom content for a given type. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content, the container of the custom content, and the corresponding space (if different from the container).",
        "operationId": "getCustomContentByType",
        "parameters": [
          {
            "description": "The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the results based on custom content ids. Multiple custom content ids can be specified as a comma-separated list.",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.",
            "in": "query",
            "name": "space-id",
            "required": false,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 100,
              "type": "array"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CustomContentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.\n\nNote: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/CustomContentBodyRepresentation"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/CustomContentBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cCustomContent\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested custom content is returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/custom-content?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the type of custom content is not found. Note, this is distinct from the type being present, but no instances of the type, which would be a 200 with empty results."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "summary": "Get custom content by type",
        "tags": [
          "Custom Content"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a new custom content in the given space, page, blogpost or other custom content.\n\nOnly one of `spaceId`, `pageId`, `blogPostId`, or `customContentId` is required in the request body.\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to create custom content in the space.",
        "operationId": "createCustomContent",
        "requestBody": {
          "$ref": "#/components/requestBodies/CustomContentCreateRequest"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CustomContentSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested custom content is created successfully.",
            "headers": {
              "location": {
                "description": "Relative link to created custom content Example response header format: `location: \u003c/wiki/api/v2/custom-content/\u003cid\u003e\u003e`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the type of custom content is not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:custom-content:confluence"
            ]
          }
        ],
        "summary": "Create custom content",
        "tags": [
          "Custom Content"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/custom-content/{custom-content-id}/properties": {
      "get": {
        "description": "Retrieves Content Properties tied to a specified custom content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content.",
        "operationId": "getCustomContentContentProperties",
        "parameters": [
          {
            "description": "The ID of the custom content for which content properties should be returned.",
            "in": "path",
            "name": "custom-content-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cContentProperty\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested content properties are successfully retrieved.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/custom-content/\u003ccustom-content-id\u003e/properties?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified custom content or the custom content was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "summary": "Get content properties for custom content",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a new content property for a piece of custom content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the custom content.",
        "operationId": "createCustomContentProperty",
        "parameters": [
          {
            "description": "The ID of the custom content to create a property for.",
            "in": "path",
            "name": "custom-content-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "description": "The content property to be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was created successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified custom content or the custom content was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence",
              "write:custom-content:confluence"
            ]
          }
        ],
        "summary": "Create content property for custom content",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence",
              "write:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/custom-content/{custom-content-id}/properties/{property-id}": {
      "delete": {
        "description": "Deletes a content property for a piece of custom content by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the custom content.",
        "operationId": "deleteCustomContentPropertyById",
        "parameters": [
          {
            "description": "The ID of the custom content the property belongs to.",
            "in": "path",
            "name": "custom-content-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be deleted.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified custom content or the custom content was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence",
              "write:custom-content:confluence"
            ]
          }
        ],
        "summary": "Delete content property for custom content by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence",
              "write:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Retrieves a specific Content Property by ID that is attached to a specified custom content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page.",
        "operationId": "getCustomContentContentPropertiesById",
        "parameters": [
          {
            "description": "The ID of the custom content for which content properties should be returned.",
            "in": "path",
            "name": "custom-content-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the content property being requested.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the requested content property is successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified custom content, the custom content was not found, or the property was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "summary": "Get content property for custom content by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a content property for a piece of custom content by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the custom content.",
        "operationId": "updateCustomContentPropertyById",
        "parameters": [
          {
            "description": "The ID of the custom content the property belongs to.",
            "in": "path",
            "name": "custom-content-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be updated.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "description": "The content property to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was updated successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified custom content or the custom content was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence",
              "write:custom-content:confluence"
            ]
          }
        ],
        "summary": "Update content property for custom content by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence",
              "write:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/custom-content/{custom-content-id}/versions": {
      "get": {
        "description": "Returns the versions of specific custom content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content and its corresponding page and space.",
        "operationId": "getCustomContentVersions",
        "parameters": [
          {
            "description": "The ID of the custom content to be queried for its versions. If you don't know the custom content ID, use Get custom-content by type and filter the results.",
            "in": "path",
            "name": "custom-content-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.\n\nNote: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/CustomContentBodyRepresentation"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/VersionSortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/CustomContentVersion"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cVersion\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested custom content versions are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/custom-content/\u003cid\u003e/versions?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested custom content or the custom content was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "summary": "Get custom content versions",
        "tags": [
          "Version"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/custom-content/{custom-content-id}/versions/{version-number}": {
      "get": {
        "description": "Retrieves version details for the specified custom content and version number.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page.",
        "operationId": "getCustomContentVersionDetails",
        "parameters": [
          {
            "description": "The ID of the custom content for which version details should be returned.",
            "in": "path",
            "name": "custom-content-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The version number of the custom content to be returned.",
            "in": "path",
            "name": "version-number",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedVersion"
                }
              }
            },
            "description": "Returned if the requested version details are successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified custom content, the custom content was not found, or the version number does not exist."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "summary": "Get version details for custom content version",
        "tags": [
          "Version"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/custom-content/{id}": {
      "delete": {
        "description": "Delete a custom content by id.\n\nDeleting a custom content will either move it to the trash or permanently delete it (purge it), depending on the apiSupport.\nTo permanently delete a **trashed** custom content, the endpoint must be called with the following param `purge=true`.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space.\nPermission to delete custom content in the space.\nPermission to administer the space (if attempting to purge).",
        "operationId": "deleteCustomContent",
        "parameters": [
          {
            "description": "The ID of the custom content to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "If attempting to purge the custom content.",
            "in": "query",
            "name": "purge",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Returned if the custom content was deleted."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the custom content is not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:custom-content:confluence"
            ]
          }
        ],
        "summary": "Delete custom content",
        "tags": [
          "Custom Content"
        ],
        "x-atlassian-connect-scope": "DELETE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "delete:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Returns a specific piece of custom content. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content, the container of the custom content, and the corresponding space (if different from the container).",
        "operationId": "getCustomContentById",
        "parameters": [
          {
            "description": "The ID of the custom content to be returned. If you don't know the custom content ID, use Get Custom Content by Type and filter the results.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.\n\nNote: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/CustomContentBodyRepresentationSingle"
            }
          },
          {
            "description": "Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Includes labels associated with this custom content in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-labels",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes content properties associated with this custom content in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-properties",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes operations associated with this custom content in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-operations",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes versions associated with this custom content in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-versions",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes the current version associated with this custom content in the response.\nBy default this is included and can be omitted by setting the value to `false`.",
            "in": "query",
            "name": "include-version",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CustomContentSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested custom content is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested custom content or the custom content was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "summary": "Get custom content by id",
        "tags": [
          "Custom Content"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a custom content by id.\n\n`spaceId` is always required and maximum one of `pageId`, `blogPostId`, or `customContentId` is allowed in the request body.\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to update custom content in the space.",
        "operationId": "updateCustomContent",
        "parameters": [
          {
            "description": "The ID of the custom content to be updated. If you don't know the custom content ID, use Get Custom Content by Type and filter the results.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CustomContentUpdateRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CustomContentSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested custom content is updated successfully.",
            "headers": {
              "location": {
                "description": "Relative link to updated custom content Example response header format: `location: \u003c/wiki/api/v2/custom-content/\u003cid\u003e\u003e`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the type of custom content is not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:custom-content:confluence"
            ]
          }
        ],
        "summary": "Update custom content",
        "tags": [
          "Custom Content"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/custom-content/{id}/attachments": {
      "get": {
        "description": "Returns the attachments of specific custom content. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the custom content and its corresponding space.",
        "operationId": "getCustomContentAttachments",
        "parameters": [
          {
            "description": "The ID of the custom content for which attachments should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AttachmentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the results to attachments based on their status. By default, `current` and `archived` are used.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "archived",
                  "trashed"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filters on the mediaType of attachments. Only one may be specified.",
            "in": "query",
            "name": "mediaType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filters on the file-name of attachments. Only one may be specified.",
            "in": "query",
            "name": "filename",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 50,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/AttachmentBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cAttachment\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested attachments are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/custom-content/\u003cid\u003e/attachments?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested custom content or the custom content was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "summary": "Get attachments for custom content",
        "tags": [
          "Attachment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/custom-content/{id}/children": {
      "get": {
        "description": "Returns all child custom content for given custom content id. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nOnly custom content that the user has permission to view will be returned.",
        "operationId": "getChildCustomContent",
        "parameters": [
          {
            "description": "The ID of the parent custom content. If you don't know the custom content ID, use Get custom-content and filter the results.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ChildCustomContentSortOrder"
              },
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/ChildCustomContent"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cChildCustomContent\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested child custom content are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/custom-content/{id}/children?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "summary": "Get child custom content",
        "tags": [
          "Children"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/custom-content/{id}/footer-comments": {
      "get": {
        "description": "Returns the comments of the specific custom content.\nThe number of results is limited by the `limit` parameter and additional results (if available) will be available through\nthe `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content and its corresponding containers.",
        "operationId": "getCustomContentComments",
        "parameters": [
          {
            "description": "The ID of the custom content for which comments should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/CustomContentCommentModel"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cCustomContentCommentModel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the custom content comments were successfully retrieved",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/custom-content/\u003cid\u003e/footer-comments?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\ncustom content or associated containers."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get custom content comments",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/custom-content/{id}/labels": {
      "get": {
        "description": "Returns the labels for a specific piece of custom content. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content and its corresponding space.\nOnly labels that the user has permission to view will be returned.",
        "operationId": "getCustomContentLabels",
        "parameters": [
          {
            "description": "The ID of the custom content for which labels should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filter the results to labels based on their prefix.",
            "in": "query",
            "name": "prefix",
            "required": false,
            "schema": {
              "enum": [
                "my",
                "team",
                "global",
                "system"
              ],
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/LabelSortOrder"
              },
              "type": "string"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cLabel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested labels are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/custom-content/\u003cid\u003e/labels?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "summary": "Get labels for custom content",
        "tags": [
          "Label"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/custom-content/{id}/operations": {
      "get": {
        "description": "Returns the permitted operations on specific custom content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the custom content and its corresponding space.",
        "operationId": "getCustomContentOperations",
        "parameters": [
          {
            "description": "The ID of the custom content for which operations should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            },
            "description": "Returned if the requested operations are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested custom content or the custom content was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "summary": "Get permitted operations for custom content",
        "tags": [
          "Operation"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/data-policies/metadata": {
      "get": {
        "deprecated": false,
        "description": "Returns data policy metadata for the workspace.\n\n**[Permissions](#permissions) required:**\nOnly apps can make this request.\nPermission to access the Confluence site ('Can use' global permission).",
        "operationId": "getDataPolicyMetadata",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPolicyMetadata"
                }
              }
            },
            "description": "Returned if the request is successful."
          },
          "400": {
            "description": "Returned if the request is not valid."
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:configuration:confluence"
            ]
          }
        ],
        "summary": "Get data policy metadata for the workspace",
        "tags": [
          "Data Policies"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:configuration:confluence"
            ],
            "state": "Current"
          }
        ],
        "x-experimental": true
      }
    },
    "/data-policies/spaces": {
      "get": {
        "description": "Returns all spaces. The results will be sorted by id ascending. The number of results is limited by the `limit` parameter and\nadditional results (if available) will be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nOnly apps can make this request.\nPermission to access the Confluence site ('Can use' global permission).\nOnly spaces that the app has permission to view will be returned.",
        "operationId": "getDataPolicySpaces",
        "parameters": [
          {
            "description": "Filter the results to spaces based on their IDs. Multiple IDs can be specified as a comma-separated list.",
            "in": "query",
            "name": "ids",
            "required": false,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Filter the results to spaces based on their keys. Multiple keys can be specified as a comma-separated list.",
            "in": "query",
            "name": "keys",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SpaceSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of spaces per result to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/DataPolicySpace"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cDataPolicySpace\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested spaces are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. \nFor example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/spaces?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "summary": "Get spaces with data policies",
        "tags": [
          "Data Policies"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence"
            ],
            "state": "Current"
          }
        ],
        "x-experimental": true
      }
    },
    "/databases": {
      "post": {
        "description": "Creates a database in the space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the corresponding space. Permission to create a database in the space.",
        "operationId": "createDatabase",
        "parameters": [
          {
            "description": "The database will be private. Only the user who creates this database will have permission to view and edit one.",
            "in": "query",
            "name": "private",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DatabaseCreateRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/DatabaseSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the database was successfully created."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing from the request."
          },
          "404": {
            "description": "Returned if:\n- The space does not exist\n- The user does not have permissions to view the space\n- The user does not have the needed permissions to create a database in the provided space"
          },
          "413": {
            "content": {},
            "description": "Returned if the request is too large in size (over 5 MB)."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:database:confluence"
            ]
          }
        ],
        "summary": "Create database",
        "tags": [
          "Database"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:database:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/databases/{database-id}/properties/{property-id}": {
      "delete": {
        "description": "Deletes a content property for a database by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the database.",
        "operationId": "deleteDatabasePropertyById",
        "parameters": [
          {
            "description": "The ID of the database the property belongs to.",
            "in": "path",
            "name": "database-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be deleted.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified database or the database was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:database:confluence",
              "write:database:confluence"
            ]
          }
        ],
        "summary": "Delete content property for database by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:database:confluence",
              "write:database:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Retrieves a specific Content Property by ID that is attached to a specified database.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the database.",
        "operationId": "getDatabaseContentPropertiesById",
        "parameters": [
          {
            "description": "The ID of the database for which content properties should be returned.",
            "in": "path",
            "name": "database-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the content property being requested.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the requested content property is successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified database, the database was not found, or the property was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:database:confluence"
            ]
          }
        ],
        "summary": "Get content property for database by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:database:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a content property for a database by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the database.",
        "operationId": "updateDatabasePropertyById",
        "parameters": [
          {
            "description": "The ID of the database the property belongs to.",
            "in": "path",
            "name": "database-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be updated.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "description": "The content property to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was updated successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified database or the database was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:database:confluence",
              "write:database:confluence"
            ]
          }
        ],
        "summary": "Update content property for database by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:database:confluence",
              "write:database:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/databases/{id}": {
      "delete": {
        "description": "Delete a database by id.\n\nDeleting a database moves the database to the trash, where it can be restored later\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the database and its corresponding space.\nPermission to delete databases in the space.",
        "operationId": "deleteDatabase",
        "parameters": [
          {
            "description": "The ID of the database to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Returned if the database was successfully deleted."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- The provided database does not exist\n- The user does not have permissions to view the database\n- The user does not have the needed permissions to delete a database in the space"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:database:confluence"
            ]
          }
        ],
        "summary": "Delete database",
        "tags": [
          "Database"
        ],
        "x-atlassian-connect-scope": "DELETE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "delete:database:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Returns a specific database.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the database and its corresponding space.",
        "operationId": "getDatabaseById",
        "parameters": [
          {
            "description": "The ID of the database to be returned",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/DatabaseSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested database is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested database or the database was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:database:confluence"
            ]
          }
        ],
        "summary": "Get database by id",
        "tags": [
          "Database"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:database:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/databases/{id}/ancestors": {
      "get": {
        "description": "Returns all ancestors for a given database by ID in top-to-bottom order (that is, the highest ancestor is the first\nitem in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available by calling this endpoint with the ID of first ancestor in the response payload.\n\nThis endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such\nas [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nPermission to view the database and its corresponding space",
        "operationId": "getDatabaseAncestors",
        "parameters": [
          {
            "description": "The ID of the database.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of items per result to return. If more results exist, call the endpoint with the highest ancestor's ID to fetch the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Ancestor"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cAncestor\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested ancestors are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified database or the database was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:content.metadata:confluence"
            ]
          }
        ],
        "summary": "Get all ancestors of database",
        "tags": [
          "Ancestors"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:content.metadata:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/databases/{id}/classification-level": {
      "get": {
        "description": "Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)\nfor a specific database.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and permission to view the database.",
        "operationId": "getDatabaseClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the database for which classification level should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationLevel"
                }
              }
            },
            "description": "Returned if the requested classification level for a database is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- Database does not have a classification level applied\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to view the specified database, or the database was not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:database:confluence"
            ]
          }
        ],
        "summary": "Get database classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:database:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)\nfor a specific database.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and permission to edit the database.",
        "operationId": "putDatabaseClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the database for which classification level should be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LiveEditContentClassificationLevelUpdateRequest"
        },
        "responses": {
          "204": {
            "description": "Returned if the classification level was successfully updated."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to edit the specified database\n- The database or the classification level was not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:database:confluence"
            ]
          }
        ],
        "summary": "Update database classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:database:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/databases/{id}/classification-level/reset": {
      "post": {
        "description": "Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)\nfor a specific database for the space \n[default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and permission to view the database.",
        "operationId": "postDatabaseClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the database for which classification level should be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LiveEditContentClassificationLevelResetRequest"
        },
        "responses": {
          "204": {
            "description": "Returned if the classification level was successfully reset."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to edit the specified database, or the database was not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:database:confluence"
            ]
          }
        ],
        "summary": "Reset database classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:database:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/databases/{id}/operations": {
      "get": {
        "description": "Returns the permitted operations on specific database.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the database and its corresponding space.",
        "operationId": "getDatabaseOperations",
        "parameters": [
          {
            "description": "The ID of the database for which operations should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            },
            "description": "Returned if the requested operations are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested database or the database was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:database:confluence"
            ]
          }
        ],
        "summary": "Get permitted operations for a database",
        "tags": [
          "Operation"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:database:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/databases/{id}/properties": {
      "get": {
        "description": "Retrieves Content Properties tied to a specified database.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the database.",
        "operationId": "getDatabaseContentProperties",
        "parameters": [
          {
            "description": "The ID of the database for which content properties should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cContentProperty\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested content properties are successfully retrieved.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/databases/\u003cid\u003e/properties?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified database or the database was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:database:confluence"
            ]
          }
        ],
        "summary": "Get content properties for database",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:database:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a new content property for a database.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the database.",
        "operationId": "createDatabaseProperty",
        "parameters": [
          {
            "description": "The ID of the database to create a property for.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "description": "The content property to be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was created successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified database or the database was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:database:confluence",
              "write:database:confluence"
            ]
          }
        ],
        "summary": "Create content property for database",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:database:confluence",
              "write:database:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/embeds": {
      "post": {
        "description": "Creates a Smart Link in the content tree in the space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the corresponding space. Permission to create a Smart Link in the content tree in the space.",
        "operationId": "createSmartLink",
        "requestBody": {
          "$ref": "#/components/requestBodies/SmartLinkCreateRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SmartLinkSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the Smart Link was successfully created in the content tree."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing from the request."
          },
          "404": {
            "description": "Returned if:\n- The space does not exist\n- The user does not have permissions to view the space\n- The user does not have the needed permissions to create a Smart Link in the content tree in the provided space"
          },
          "413": {
            "content": {},
            "description": "Returned if the request is too large in size (over 5 MB)."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:embed:confluence"
            ]
          }
        ],
        "summary": "Create Smart Link in the content tree",
        "tags": [
          "Smart Link"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:embed:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/embeds/{embed-id}/properties/{property-id}": {
      "delete": {
        "description": "Deletes a content property for a Smart Link in the content tree by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the Smart Link in the content tree.",
        "operationId": "deleteSmartLinkPropertyById",
        "parameters": [
          {
            "description": "The ID of the Smart Link in the content tree the property belongs to.",
            "in": "path",
            "name": "embed-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be deleted.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified Smart Link in the content tree or the Smart Link was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:embed:confluence",
              "write:embed:confluence"
            ]
          }
        ],
        "summary": "Delete content property for Smart Link in the content tree by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:embed:confluence",
              "write:embed:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Retrieves a specific Content Property by ID that is attached to a specified Smart Link in the content tree.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the Smart Link in the content tree.",
        "operationId": "getSmartLinkContentPropertiesById",
        "parameters": [
          {
            "description": "The ID of the Smart Link in the content tree for which content properties should be returned.",
            "in": "path",
            "name": "embed-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the content property being requested.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the requested content property is successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified Smart Link in the content tree, the Smart Link was not found, or the property was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:embed:confluence"
            ]
          }
        ],
        "summary": "Get content property for Smart Link in the content tree by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:embed:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a content property for a Smart Link in the content tree by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the Smart Link in the content tree.",
        "operationId": "updateSmartLinkPropertyById",
        "parameters": [
          {
            "description": "The ID of the Smart Link in the content tree the property belongs to.",
            "in": "path",
            "name": "embed-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be updated.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "description": "The content property to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was updated successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified Smart Link in the content tree or the Smart Link was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:embed:confluence",
              "write:embed:confluence"
            ]
          }
        ],
        "summary": "Update content property for Smart Link in the content tree by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:embed:confluence",
              "write:embed:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/embeds/{id}": {
      "delete": {
        "description": "Delete a Smart Link in the content tree by id.\n\nDeleting a Smart Link in the content tree moves the Smart Link to the trash, where it can be restored later\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the Smart Link in the content tree and its corresponding space.\nPermission to delete Smart Links in the content tree in the space.",
        "operationId": "deleteSmartLink",
        "parameters": [
          {
            "description": "The ID of the Smart Link in the content tree to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Returned if the Smart Link in the content tree was successfully deleted."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- The provided Smart Link in the content tree does not exist\n- The user does not have permissions to view the Smart Link in the content tree\n- The user does not have the needed permissions to delete a Smart Link in the content tree in the space"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:embed:confluence"
            ]
          }
        ],
        "summary": "Delete Smart Link in the content tree",
        "tags": [
          "Smart Link"
        ],
        "x-atlassian-connect-scope": "DELETE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "delete:embed:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Returns a specific Smart Link in the content tree.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the Smart Link in the content tree and its corresponding space.",
        "operationId": "getSmartLinkById",
        "parameters": [
          {
            "description": "The ID of the Smart Link in the content tree to be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SmartLinkSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested Smart Link in the content tree is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested Smart Link in the content tree or the Smart Link was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:embed:confluence"
            ]
          }
        ],
        "summary": "Get Smart Link in the content tree by id",
        "tags": [
          "Smart Link"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:embed:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/embeds/{id}/ancestors": {
      "get": {
        "description": "Returns all ancestors for a given Smart Link in the content tree by ID in top-to-bottom order (that is, the highest ancestor is\nthe first item in the response payload). The number of results is limited by the `limit` parameter and additional results \n(if available) will be available by calling this endpoint with the ID of first ancestor in the response payload.\n\nThis endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such\nas [Get Smart Link in the content tree by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nPermission to view the Smart Link in the content tree and its corresponding space",
        "operationId": "getSmartLinkAncestors",
        "parameters": [
          {
            "description": "The ID of the Smart Link in the content tree.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of items per result to return. If more results exist, call the endpoint with the highest ancestor's ID to fetch the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Ancestor"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cAncestor\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested ancestors are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified Smart Link in the content tree or the Smart Link was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:content.metadata:confluence"
            ]
          }
        ],
        "summary": "Get all ancestors of Smart Link in content tree",
        "tags": [
          "Ancestors"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:content.metadata:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/embeds/{id}/operations": {
      "get": {
        "description": "Returns the permitted operations on specific Smart Link in the content tree.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the Smart Link in the content tree and its corresponding space.",
        "operationId": "getSmartLinkOperations",
        "parameters": [
          {
            "description": "The ID of the Smart Link in the content tree for which operations should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            },
            "description": "Returned if the requested operations are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested Smart Link in the content tree or the Smart Link was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:embed:confluence"
            ]
          }
        ],
        "summary": "Get permitted operations for a Smart Link in the content tree",
        "tags": [
          "Operation"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:embed:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/embeds/{id}/properties": {
      "get": {
        "description": "Retrieves Content Properties tied to a specified Smart Link in the content tree.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the Smart Link in the content tree.",
        "operationId": "getSmartLinkContentProperties",
        "parameters": [
          {
            "description": "The ID of the Smart Link in the content tree for which content properties should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cContentProperty\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested content properties are successfully retrieved.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/embeds/\u003cid\u003e/properties?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified Smart Link in the content tree or the Smart Link was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:embed:confluence"
            ]
          }
        ],
        "summary": "Get content properties for Smart Link in the content tree",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:embed:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a new content property for a Smart Link in the content tree.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the Smart Link in the content tree.",
        "operationId": "createSmartLinkProperty",
        "parameters": [
          {
            "description": "The ID of the Smart Link in the content tree to create a property for.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "description": "The content property to be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was created successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified Smart Link in the content tree or the Smart Link was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:embed:confluence",
              "write:embed:confluence"
            ]
          }
        ],
        "summary": "Create content property for Smart Link in the content tree",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:embed:confluence",
              "write:embed:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/folders": {
      "post": {
        "description": "Creates a folder in the space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the corresponding space. Permission to create a folder in the space.",
        "operationId": "createFolder",
        "requestBody": {
          "$ref": "#/components/requestBodies/FolderCreateRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/FolderSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the folder was successfully created in the content tree."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing from the request."
          },
          "404": {
            "description": "Returned if:\n- The space does not exist\n- The user does not have permissions to view the space\n- The user does not have the needed permissions to create a folder in the provided space"
          },
          "413": {
            "content": {},
            "description": "Returned if the request is too large in size (over 5 MB)."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:folder:confluence"
            ]
          }
        ],
        "summary": "Create folder",
        "tags": [
          "Folder"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:folder:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/folders/{folder-id}/properties/{property-id}": {
      "delete": {
        "description": "Deletes a content property for a folder by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the folder.",
        "operationId": "deleteFolderPropertyById",
        "parameters": [
          {
            "description": "The ID of the folder the property belongs to.",
            "in": "path",
            "name": "folder-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be deleted.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified folder or the folder was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:folder:confluence",
              "write:folder:confluence"
            ]
          }
        ],
        "summary": "Delete content property for folder by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:folder:confluence",
              "write:folder:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Retrieves a specific Content Property by ID that is attached to a specified folder.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the folder.",
        "operationId": "getFolderContentPropertiesById",
        "parameters": [
          {
            "description": "The ID of the folder for which content properties should be returned.",
            "in": "path",
            "name": "folder-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the content property being requested.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the requested content property is successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified folder, the folder was not found, or the property was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:folder:confluence"
            ]
          }
        ],
        "summary": "Get content property for folder by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:folder:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a content property for a folder by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the folder.",
        "operationId": "updateFolderPropertyById",
        "parameters": [
          {
            "description": "The ID of the folder the property belongs to.",
            "in": "path",
            "name": "folder-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be updated.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "description": "The content property to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was updated successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified folder or the folder was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:folder:confluence",
              "write:folder:confluence"
            ]
          }
        ],
        "summary": "Update content property for folder by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:folder:confluence",
              "write:folder:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/folders/{id}": {
      "delete": {
        "description": "Delete a folder by id.\n\nDeleting a folder moves the folder to the trash, where it can be restored later\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the folder and its corresponding space.\nPermission to delete folders in the space.",
        "operationId": "deleteFolder",
        "parameters": [
          {
            "description": "The ID of the folder to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Returned if the folder was successfully deleted."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- The provided folder does not exist\n- The user does not have permissions to view the folder\n- The user does not have the needed permissions to delete folder in the space"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:folder:confluence"
            ]
          }
        ],
        "summary": "Delete folder",
        "tags": [
          "Folder"
        ],
        "x-atlassian-connect-scope": "DELETE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "delete:folder:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Returns a specific folder.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the folder and its corresponding space.",
        "operationId": "getFolderById",
        "parameters": [
          {
            "description": "The ID of the folder to be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/FolderSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested folder is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested folder or the folder was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:folder:confluence"
            ]
          }
        ],
        "summary": "Get folder by id",
        "tags": [
          "Folder"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:folder:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/folders/{id}/ancestors": {
      "get": {
        "description": "Returns all ancestors for a given folder by ID in top-to-bottom order (that is, the highest ancestor is\nthe first item in the response payload). The number of results is limited by the `limit` parameter and additional results \n(if available) will be available by calling this endpoint with the ID of first ancestor in the response payload.\n\nThis endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such\nas [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-folders-id-get).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nPermission to view the folder and its corresponding space",
        "operationId": "getFolderAncestors",
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of items per result to return. If more results exist, call the endpoint with the highest ancestor's ID to fetch the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Ancestor"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cAncestor\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested ancestors are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified folder or the folder was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:content.metadata:confluence"
            ]
          }
        ],
        "summary": "Get all ancestors of folder",
        "tags": [
          "Ancestors"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:content.metadata:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/folders/{id}/operations": {
      "get": {
        "description": "Returns the permitted operations on specific folder.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the folder and its corresponding space.",
        "operationId": "getFolderOperations",
        "parameters": [
          {
            "description": "The ID of the folder for which operations should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            },
            "description": "Returned if the requested operations are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested folder or the folder was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:folder:confluence"
            ]
          }
        ],
        "summary": "Get permitted operations for a folder",
        "tags": [
          "Operation"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:folder:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/folders/{id}/properties": {
      "get": {
        "description": "Retrieves Content Properties tied to a specified folder.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the folder.",
        "operationId": "getFolderContentProperties",
        "parameters": [
          {
            "description": "The ID of the folder for which content properties should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cContentProperty\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested content properties are successfully retrieved.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/embeds/\u003cid\u003e/properties?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified folder or the folder was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:folder:confluence"
            ]
          }
        ],
        "summary": "Get content properties for folder",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:folder:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a new content property for a folder.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the folder.",
        "operationId": "createFolderProperty",
        "parameters": [
          {
            "description": "The ID of the folder to create a property for.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "description": "The content property to be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was created successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified folder or the folder was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:folder:confluence",
              "write:folder:confluence"
            ]
          }
        ],
        "summary": "Create content property for folder",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:folder:confluence",
              "write:folder:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/footer-comments": {
      "get": {
        "description": "Returns all footer comments. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the container and its corresponding space.",
        "operationId": "getFooterComments",
        "parameters": [
          {
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/FooterCommentModel"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cFooterCommentModel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested footer comments are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/footer-comments/\u003cid\u003e/children?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get footer comments",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Create a footer comment.\n\nThe footer comment can be made against several locations: \n- at the top level (specifying pageId or blogPostId in the request body)\n- as a reply (specifying parentCommentId in the request body)\n- against an attachment (note: this is different than the comments added via the attachment properties page on the UI, which are referred to as version comments)\n- against a custom content\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.",
        "operationId": "createFooterComment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFooterCommentModel"
              }
            }
          },
          "description": "The footer comment to be created",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/FooterCommentModel"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the footer comment is created.",
            "headers": {
              "location": {
                "description": "Returns the URL at which the created footer comment is retrievable.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided"
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- The page, blog post, parent comment, or attachment was not found\n- The calling user does not have permission to view the parent page/blog post\n- The user is forbidden from creating a comment tied to a resource they are allowed to view"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:comment:confluence"
            ]
          }
        ],
        "summary": "Create footer comment",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/footer-comments/{comment-id}": {
      "delete": {
        "description": "Deletes a footer comment. This is a permanent deletion and cannot be reverted.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to delete comments in the space.",
        "operationId": "deleteFooterComment",
        "parameters": [
          {
            "description": "The ID of the comment to be retrieved.",
            "in": "path",
            "name": "comment-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the footer comment is deleted."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- The comment was not found\n- The calling user does not have permission to view the comment\n- The user is forbidden from deleting a comment tied to a resource they are allowed to view"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:comment:confluence"
            ]
          }
        ],
        "summary": "Delete footer comment",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "DELETE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "delete:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Retrieves a footer comment by id\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the container and its corresponding space.",
        "operationId": "getFooterCommentById",
        "parameters": [
          {
            "description": "The ID of the comment to be retrieved.",
            "in": "path",
            "name": "comment-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentationSingle"
            }
          },
          {
            "description": "Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Includes content properties associated with this footer comment in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-properties",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes operations associated with this footer comment in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-operations",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes likes associated with this footer comment in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-likes",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes versions associated with this footer comment in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-versions",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes the current version associated with this footer comment in the response.\nBy default this is included and can be omitted by setting the value to `false`.",
            "in": "query",
            "name": "include-version",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/FooterCommentModel"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the footer comment is successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\ncomment or the comment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get footer comment by id",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a footer comment. This can be used to update the body text of a comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.",
        "operationId": "updateFooterComment",
        "parameters": [
          {
            "description": "The ID of the comment to be retrieved.",
            "in": "path",
            "name": "comment-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateFooterCommentModel"
                  },
                  {
                    "properties": {
                      "_links": {
                        "properties": {
                          "base": {
                            "description": "Base url of the Confluence site.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          },
          "description": "The footer comment to be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FooterCommentModel"
                }
              }
            },
            "description": "Returned if the footer comment is updated successfully"
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided"
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- The comment was not found\n- The calling user does not have permission to view the comment\n- The user is forbidden from updating a comment tied to a resource they are allowed to view"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:comment:confluence"
            ]
          }
        ],
        "summary": "Update footer comment",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/footer-comments/{id}/children": {
      "get": {
        "description": "Returns the children footer comments of specific comment. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "operationId": "getFooterCommentChildren",
        "parameters": [
          {
            "description": "The ID of the parent comment for which footer comment children should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/ChildrenCommentModel"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cChildrenCommentModel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested footer comments are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/footer-comments/\u003cid\u003e/children?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nparent page/blog post or the page/blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get children footer comments",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/footer-comments/{id}/likes/count": {
      "get": {
        "description": "Returns the count of likes of specific footer comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page/blogpost and its corresponding space.",
        "operationId": "getFooterLikeCount",
        "parameters": [
          {
            "description": "The ID of the footer comment for which like count should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "description": "The count number",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "title": "Integer",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested count is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the comment or the comment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get like count for footer comment",
        "tags": [
          "Like"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/footer-comments/{id}/likes/users": {
      "get": {
        "description": "Returns the account IDs of likes of specific footer comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page/blogpost and its corresponding space.",
        "operationId": "getFooterLikeUsers",
        "parameters": [
          {
            "description": "The ID of the footer comment for which like count should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Like"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cString\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested account IDs are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/footer-comments/\u003cid\u003e/likes/users?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the comment or the comment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get account IDs of likes for footer comment",
        "tags": [
          "Like"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/footer-comments/{id}/operations": {
      "get": {
        "description": "Returns the permitted operations on specific footer comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the footer comment and its corresponding space.",
        "operationId": "getFooterCommentOperations",
        "parameters": [
          {
            "description": "The ID of the footer comment for which operations should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            },
            "description": "Returned if the requested operations are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested footer comment or the footer comment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get permitted operations for footer comment",
        "tags": [
          "Operation"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/footer-comments/{id}/versions": {
      "get": {
        "description": "Retrieves the versions of the specified footer comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blog post and its corresponding space.",
        "operationId": "getFooterCommentVersions",
        "parameters": [
          {
            "description": "The ID of the footer comment for which versions should be returned",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/VersionSortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/CommentVersion"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cVersion\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested footer comment versions are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/footer-comments/\u003cid\u003e/versions?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the specified page\nor blog post, the footer comment was not found, or the version number does not exist."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get footer comment versions",
        "tags": [
          "Version"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/footer-comments/{id}/versions/{version-number}": {
      "get": {
        "description": "Retrieves version details for the specified footer comment version.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blog post and its corresponding space.",
        "operationId": "getFooterCommentVersionDetails",
        "parameters": [
          {
            "description": "The ID of the footer comment for which version details should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The version number of the footer comment to be returned.",
            "in": "path",
            "name": "version-number",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedVersion"
                }
              }
            },
            "description": "Returned if the requested version details are successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the specified page\nor blog post, the footer comment was not found, or the version number does not exist."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get version details for footer comment version",
        "tags": [
          "Version"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/inline-comments": {
      "get": {
        "description": "Returns all inline comments. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "operationId": "getInlineComments",
        "parameters": [
          {
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/InlineCommentModel"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cInlineCommentModel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested inline comments are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/inline-comments/\u003cid\u003e/children?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get inline comments",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Create an inline comment. This can be at the top level (specifying pageId or blogPostId in the request body)\nor as a reply (specifying parentCommentId in the request body). Note the inlineCommentProperties object in the\nrequest body is used to select the text the inline comment should be tied to. This is what determines the text \nhighlighting when viewing a page in Confluence.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.",
        "operationId": "createInlineComment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInlineCommentModel"
              }
            }
          },
          "description": "The inline comment to be created",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/InlineCommentModel"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the inline comment is created.",
            "headers": {
              "location": {
                "description": "Returns the URL at which the created inline comment is retrievable.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- The page/blog post was not found\n- The calling user does not have permission to view the parent page/blog post\n- The user is forbidden from creating a comment tied to a resource they are allowed to view"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:comment:confluence"
            ]
          }
        ],
        "summary": "Create inline comment",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/inline-comments/{comment-id}": {
      "delete": {
        "description": "Deletes an inline comment. This is a permanent deletion and cannot be reverted.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to delete comments in the space.",
        "operationId": "deleteInlineComment",
        "parameters": [
          {
            "description": "The ID of the comment to be deleted.",
            "in": "path",
            "name": "comment-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the inline comment is deleted."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- The comment was not found\n- The calling user does not have permission to view the comment\n- The user is forbidden from deleting a comment tied to a resource they are allowed to view"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:comment:confluence"
            ]
          }
        ],
        "summary": "Delete inline comment",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "DELETE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "delete:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Retrieves an inline comment by id\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space.",
        "operationId": "getInlineCommentById",
        "parameters": [
          {
            "description": "The ID of the comment to be retrieved.",
            "in": "path",
            "name": "comment-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentationSingle"
            }
          },
          {
            "description": "Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Includes content properties associated with this inline comment in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-properties",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes operations associated with this inline comment in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-operations",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes likes associated with this inline comment in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-likes",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes versions associated with this inline comment in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-versions",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes the current version associated with this inline comment in the response.\nBy default this is included and can be omitted by setting the value to `false`.",
            "in": "query",
            "name": "include-version",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/InlineCommentModel"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the inline comment is successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\ncomment or the comment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get inline comment by id",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update an inline comment. This can be used to update the body text of a comment and/or to resolve the comment\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.",
        "operationId": "updateInlineComment",
        "parameters": [
          {
            "description": "The ID of the comment to be retrieved.",
            "in": "path",
            "name": "comment-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInlineCommentModel"
              }
            }
          },
          "description": "The inline comment to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/InlineCommentModel"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the inline comment is updated successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- The comment was not found\n- The calling user does not have permission to view the comment\n- The user is forbidden from updating a comment tied to a resource they are allowed to view"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:comment:confluence"
            ]
          }
        ],
        "summary": "Update inline comment",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/inline-comments/{id}/children": {
      "get": {
        "description": "Returns the children inline comments of specific comment. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "operationId": "getInlineCommentChildren",
        "parameters": [
          {
            "description": "The ID of the parent comment for which inline comment children should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/InlineCommentChildrenModel"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cInlineCommentChildrenModel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested footer comments are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/inline-comments/\u003cid\u003e/children?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nparent page/blog post or the page/blog post was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get children inline comments",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/inline-comments/{id}/likes/count": {
      "get": {
        "description": "Returns the count of likes of specific inline comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page/blogpost and its corresponding space.",
        "operationId": "getInlineLikeCount",
        "parameters": [
          {
            "description": "The ID of the inline comment for which like count should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "description": "The count number",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "title": "Integer",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested count is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the comment or the comment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get like count for inline comment",
        "tags": [
          "Like"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/inline-comments/{id}/likes/users": {
      "get": {
        "description": "Returns the account IDs of likes of specific inline comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page/blogpost and its corresponding space.",
        "operationId": "getInlineLikeUsers",
        "parameters": [
          {
            "description": "The ID of the inline comment for which like count should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Like"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cString\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested account IDs are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/inline-comments/\u003cid\u003e/likes/users?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the comment or the comment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get account IDs of likes for inline comment",
        "tags": [
          "Like"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/inline-comments/{id}/operations": {
      "get": {
        "description": "Returns the permitted operations on specific inline comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the inline comment and its corresponding space.",
        "operationId": "getInlineCommentOperations",
        "parameters": [
          {
            "description": "The ID of the inline comment for which operations should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            },
            "description": "Returned if the requested operations are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested inline comment or the inline comment was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get permitted operations for inline comment",
        "tags": [
          "Operation"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/inline-comments/{id}/versions": {
      "get": {
        "description": "Retrieves the versions of the specified inline comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blog post and its corresponding space.",
        "operationId": "getInlineCommentVersions",
        "parameters": [
          {
            "description": "The ID of the inline comment for which versions should be returned",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/VersionSortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/CommentVersion"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cVersion\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested inline comment versions are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/inline-comments/\u003cid\u003e/versions?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the specified page\nor blog post, the inline comment was not found, or the version number does not exist."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get inline comment versions",
        "tags": [
          "Version"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/inline-comments/{id}/versions/{version-number}": {
      "get": {
        "description": "Retrieves version details for the specified inline comment version.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blog post and its corresponding space.",
        "operationId": "getInlineCommentVersionDetails",
        "parameters": [
          {
            "description": "The ID of the inline comment for which version details should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The version number of the inline comment to be returned.",
            "in": "path",
            "name": "version-number",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedVersion"
                }
              }
            },
            "description": "Returned if the requested version details are successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the specified page\nor blog post, the inline comment was not found, or the version number does not exist."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get version details for inline comment version",
        "tags": [
          "Version"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/labels": {
      "get": {
        "description": "Returns all labels. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nOnly labels that the user has permission to view will be returned.",
        "operationId": "getLabels",
        "parameters": [
          {
            "description": "Filters on label ID. Multiple IDs can be specified as a comma-separated list.",
            "in": "query",
            "name": "label-id",
            "required": false,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Filters on label prefix. Multiple IDs can be specified as a comma-separated list.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/LabelSortOrder"
              },
              "type": "string"
            }
          },
          {
            "description": "Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cLabel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested labels are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/labels?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:label:confluence"
            ]
          }
        ],
        "summary": "Get labels",
        "tags": [
          "Label"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:label:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/labels/{id}/attachments": {
      "get": {
        "description": "Returns the attachments of specified label. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the attachment and its corresponding space.",
        "operationId": "getLabelAttachments",
        "parameters": [
          {
            "description": "The ID of the label for which attachments should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AttachmentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/AttachmentBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cAttachment\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested attachments for specified label were successfully fetched.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/labels/\u003cid\u003e/attachment?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested label or label was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "summary": "Get attachments for label",
        "tags": [
          "Attachment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/labels/{id}/blogposts": {
      "get": {
        "description": "Returns the blogposts of specified label. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "operationId": "getLabelBlogPosts",
        "parameters": [
          {
            "description": "The ID of the label for which blog posts should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.",
            "in": "query",
            "name": "space-id",
            "required": false,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 100,
              "type": "array"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/BlogPostSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of blog posts per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/BlogPostBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cBlogPost\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested blog posts for specified label were successfully fetched.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/labels/\u003cid\u003e/blogposts?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested label or label was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get blog posts for label",
        "tags": [
          "Blog Post"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/labels/{id}/pages": {
      "get": {
        "description": "Returns the pages of specified label. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "operationId": "getLabelPages",
        "parameters": [
          {
            "description": "The ID of the label for which pages should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.",
            "in": "query",
            "name": "space-id",
            "required": false,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 100,
              "type": "array"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/PageBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cPage\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested pages for specified label were successfully fetched.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/labels/\u003cid\u003e/pages?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested label or label was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get pages for label",
        "tags": [
          "Page"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages": {
      "get": {
        "description": "Returns all pages. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nOnly pages that the user has permission to view will be returned.",
        "operationId": "getPages",
        "parameters": [
          {
            "description": "Filter the results based on page ids. Multiple page ids can be specified as a comma-separated list.",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.",
            "in": "query",
            "name": "space-id",
            "required": false,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 100,
              "type": "array"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSortOrder"
            }
          },
          {
            "description": "Filter the results to pages based on their status. By default, `current` and `archived` are used.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "archived",
                  "deleted",
                  "trashed"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter the results to pages based on their title.",
            "in": "query",
            "name": "title",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/PageBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cPage\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested pages are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/pages?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get pages",
        "tags": [
          "Page"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a page in the space.\n\nPages are created as published by default unless specified as a draft in the status field. If creating a published page, the title must be specified.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the corresponding space. Permission to create a page in the space.",
        "operationId": "createPage",
        "parameters": [
          {
            "description": "Tag the content as embedded and content will be created in NCS.",
            "in": "query",
            "name": "embedded",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "The page will be private. Only the user who creates this page will have permission to view and edit one.",
            "in": "query",
            "name": "private",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "The page will be created at the root level of the space (outside the space homepage tree). If true, then a \nvalue may not be supplied for the `parentId` body parameter.",
            "in": "query",
            "name": "root-level",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PageCreateRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PageSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the page was successfully created."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing from the request."
          },
          "404": {
            "description": "Returned if:\n- The space does not exist\n- The user does not have permissions to view the space\n- The user does not have the needed permissions to create a page in the provided space"
          },
          "413": {
            "content": {},
            "description": "Returned if the request is too large in size (over 5 MB)."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Create page",
        "tags": [
          "Page"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}": {
      "delete": {
        "description": "Delete a page by id.\n\nBy default this will delete pages that are non-drafts. To delete a page that is a draft, the endpoint must be called on a \ndraft with the following param `draft=true`. Discarded drafts are not sent to the trash and are permanently deleted.\n\nDeleting a page moves the page to the trash, where it can be restored later. To permanently delete a page (or \"purge\" it),\nthe endpoint must be called on a **trashed** page with the following param `purge=true`.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page and its corresponding space.\nPermission to delete pages in the space.\nPermission to administer the space (if attempting to purge).",
        "operationId": "deletePage",
        "parameters": [
          {
            "description": "The ID of the page to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "If attempting to purge the page.",
            "in": "query",
            "name": "purge",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "If attempting to delete a page that is a draft.",
            "in": "query",
            "name": "draft",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Returned if the page was successfully deleted."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- The provided page does not exist\n- The user does not have permissions to view the page\n- The user does not have the needed permissions to delete a page in the space"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:page:confluence"
            ]
          }
        ],
        "summary": "Delete page",
        "tags": [
          "Page"
        ],
        "x-atlassian-connect-scope": "DELETE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "delete:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Returns a specific page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page and its corresponding space.",
        "operationId": "getPageById",
        "parameters": [
          {
            "description": "The ID of the page to be returned. If you don't know the page ID, use Get pages and filter the results.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentationSingle"
            }
          },
          {
            "description": "Retrieve the draft version of this page.",
            "in": "query",
            "name": "get-draft",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Filter the page being retrieved by its status.",
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "archived",
                  "trashed",
                  "deleted",
                  "historical",
                  "draft"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Includes labels associated with this page in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-labels",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes content properties associated with this page in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-properties",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes operations associated with this page in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-operations",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes likes associated with this page in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-likes",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes versions associated with this page in the response.\nThe number of results will be limited to 50 and sorted in the default sort order. \nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-versions",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes the current version associated with this page in the response.\nBy default this is included and can be omitted by setting the value to `false`.",
            "in": "query",
            "name": "include-version",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Includes whether this page has been favorited by the current user.",
            "in": "query",
            "name": "include-favorited-by-current-user-status",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes web resources that can be used to render page content on a client.",
            "in": "query",
            "name": "include-webresources",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PageSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested page is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get page by id",
        "tags": [
          "Page"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a page by id.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page and its corresponding space. Permission to update pages in the space.",
        "operationId": "updatePage",
        "parameters": [
          {
            "description": "The ID of the page to be updated. If you don't know the page ID, use Get Pages and filter the results.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PageUpdateRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PageSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested page is successfully updated."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- The provided page does not exist\n- The user does not have permissions to view the page\n- The user does not have the needed permissions to update a page in the space\n- The user provides a parentId for a page that does not exist or they do not have permission to view\n- There are no spaces associated with the given spaceId"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Update page",
        "tags": [
          "Page"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}/ancestors": {
      "get": {
        "description": "Returns all ancestors for a given page by ID in top-to-bottom order (that is, the highest ancestor is the first\nitem in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available by calling this endpoint with the ID of first ancestor in the response payload.\n\nThis endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such\nas [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
        "operationId": "getPageAncestors",
        "parameters": [
          {
            "description": "The ID of the page.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of pages per result to return. If more results exist, call this endpoint with the highest ancestor's ID to fetch the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Ancestor"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cAncestor\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested ancestors are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:content.metadata:confluence"
            ]
          }
        ],
        "summary": "Get all ancestors of page",
        "tags": [
          "Ancestors"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:content.metadata:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}/attachments": {
      "get": {
        "description": "Returns the attachments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "operationId": "getPageAttachments",
        "parameters": [
          {
            "description": "The ID of the page for which attachments should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AttachmentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the results to attachments based on their status. By default, `current` and `archived` are used.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "archived",
                  "trashed"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filters on the mediaType of attachments. Only one may be specified.",
            "in": "query",
            "name": "mediaType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filters on the file-name of attachments. Only one may be specified.",
            "in": "query",
            "name": "filename",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 50,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/AttachmentBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cAttachment\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested attachments are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/pages/\u003cid\u003e/attachments?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "summary": "Get attachments for page",
        "tags": [
          "Attachment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:attachment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}/children": {
      "get": {
        "description": "Returns all child pages for given page id. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nOnly pages that the user has permission to view will be returned.",
        "operationId": "getChildPages",
        "parameters": [
          {
            "description": "The ID of the parent page. If you don't know the page ID, use Get pages and filter the results.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ChildPageSortOrder"
              },
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/ChildPage"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cChildPage\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested child pages are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/pages/{id}/children?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get child pages",
        "tags": [
          "Children"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}/classification-level": {
      "get": {
        "description": "Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)\nfor a specific page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and permission to view the page.\n'Permission to edit the page is required if trying to view classification level for a draft.",
        "operationId": "getPageClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the page for which classification level should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Status of page from which classification level will fetched.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "default": "current",
              "enum": [
                "current",
                "draft",
                "archived"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationLevel"
                }
              }
            },
            "description": "Returned if the requested classification level for a page is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- Page does not have a classification level applied\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to view the specified page or the page was not found\n- The calling user does not have permission to edit the specified page when trying to fetch classification level for a draft"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Get page classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)\nfor a specific page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and permission to edit the page.",
        "operationId": "putPageClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the page for which classification level should be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ContentClassificationLevelUpdateRequest"
        },
        "responses": {
          "204": {
            "description": "Returned if the classification level was successfully updated."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to edit the specified page or the page was not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Update page classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}/classification-level/reset": {
      "post": {
        "description": "Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)\nfor a specific page for the space \n[default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and permission to view the page.",
        "operationId": "postPageClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the page for which classification level should be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ContentClassificationLevelDeleteRequest"
        },
        "responses": {
          "204": {
            "description": "Returned if the classification level was successfully reset."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to edit the specified page or the page was not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Reset page classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}/custom-content": {
      "get": {
        "description": "Returns all custom content for a given type within a given page. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content, the container of the custom content (page), and the corresponding space.",
        "operationId": "getCustomContentByTypeInPage",
        "parameters": [
          {
            "description": "The ID of the page for which custom content should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CustomContentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.\n\nNote: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/CustomContentBodyRepresentation"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/CustomContentBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cCustomContent\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested custom content is returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/pages/{id}/custom-content?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the given page is not found. Returned if the type of custom content is not found. Note, this is distinct from the type being present, but no instances of the type, which would be a 200 with empty results."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "summary": "Get custom content by type in page",
        "tags": [
          "Custom Content"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}/footer-comments": {
      "get": {
        "description": "Returns the root footer comments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "operationId": "getPageFooterComments",
        "parameters": [
          {
            "description": "The ID of the page for which footer comments should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Filter the footer comment being retrieved by its status.",
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "archived",
                  "trashed",
                  "deleted",
                  "historical",
                  "draft"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/PageCommentModel"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cPageCommentModel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested footer comments are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/pages/\u003cid\u003e/footer-comments?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get footer comments for page",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}/inline-comments": {
      "get": {
        "description": "Returns the root inline comments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "operationId": "getPageInlineComments",
        "parameters": [
          {
            "description": "The ID of the page for which inline comments should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Filter the inline comment being retrieved by its status.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "archived",
                  "trashed",
                  "deleted",
                  "historical",
                  "draft"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter the inline comment being retrieved by its resolution status.",
            "in": "query",
            "name": "resolution-status",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "resolved",
                  "open",
                  "dangling",
                  "reopened"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of inline comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/PageInlineCommentModel"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cPageInlineCommentModel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested inline comments are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/pages/\u003cid\u003e/inline-comments?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "summary": "Get inline comments for page",
        "tags": [
          "Comment"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:comment:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}/labels": {
      "get": {
        "description": "Returns the labels of specific page. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.\nOnly labels that the user has permission to view will be returned.",
        "operationId": "getPageLabels",
        "parameters": [
          {
            "description": "The ID of the page for which labels should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filter the results to labels based on their prefix.",
            "in": "query",
            "name": "prefix",
            "required": false,
            "schema": {
              "enum": [
                "my",
                "team",
                "global",
                "system"
              ],
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/LabelSortOrder"
              },
              "type": "string"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cLabel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested labels are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/pages/\u003cid\u003e/labels?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get labels for page",
        "tags": [
          "Label"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}/likes/count": {
      "get": {
        "description": "Returns the count of likes of specific page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "operationId": "getPageLikeCount",
        "parameters": [
          {
            "description": "The ID of the page for which like count should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "description": "The count number",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "title": "Integer",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested count is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get like count for page",
        "tags": [
          "Like"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}/likes/users": {
      "get": {
        "description": "Returns the account IDs of likes of specific page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "operationId": "getPageLikeUsers",
        "parameters": [
          {
            "description": "The ID of the page for which like count should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Like"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cString\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested account IDs are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/pages/\u003cid\u003e/likes/users?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get account IDs of likes for page",
        "tags": [
          "Like"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}/operations": {
      "get": {
        "description": "Returns the permitted operations on specific page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the page and its corresponding space.",
        "operationId": "getPageOperations",
        "parameters": [
          {
            "description": "The ID of the page for which operations should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            },
            "description": "Returned if the requested operations are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get permitted operations for page",
        "tags": [
          "Operation"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{id}/versions": {
      "get": {
        "description": "Returns the versions of specific page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page and its corresponding space.",
        "operationId": "getPageVersions",
        "parameters": [
          {
            "description": "The ID of the page to be queried for its versions. If you don't know the page ID, use Get pages and filter the results.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/VersionSortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/PageVersion"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cVersion\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested page versions are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/pages/\u003cid\u003e/versions?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get page versions",
        "tags": [
          "Version"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{page-id}/properties": {
      "get": {
        "description": "Retrieves Content Properties tied to a specified page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page.",
        "operationId": "getPageContentProperties",
        "parameters": [
          {
            "description": "The ID of the page for which content properties should be returned.",
            "in": "path",
            "name": "page-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cContentProperty\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested content properties are successfully retrieved.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/pages/\u003cpage-id\u003e/properties?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get content properties for page",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a new content property for a page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the page.",
        "operationId": "createPageProperty",
        "parameters": [
          {
            "description": "The ID of the page to create a property for.",
            "in": "path",
            "name": "page-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "description": "The content property to be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was created successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Create content property for page",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{page-id}/properties/{property-id}": {
      "delete": {
        "description": "Deletes a content property for a page by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the page.",
        "operationId": "deletePagePropertyById",
        "parameters": [
          {
            "description": "The ID of the page the property belongs to.",
            "in": "path",
            "name": "page-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be deleted.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Delete content property for page by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Retrieves a specific Content Property by ID that is attached to a specified page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page.",
        "operationId": "getPageContentPropertiesById",
        "parameters": [
          {
            "description": "The ID of the page for which content properties should be returned.",
            "in": "path",
            "name": "page-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the content property being requested.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the requested content property is successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified page, the page was not found, or the property was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get content property for page by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a content property for a page by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the page.",
        "operationId": "updatePagePropertyById",
        "parameters": [
          {
            "description": "The ID of the page the property belongs to.",
            "in": "path",
            "name": "page-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be updated.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "description": "The content property to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was updated successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "summary": "Update content property for page by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/pages/{page-id}/versions/{version-number}": {
      "get": {
        "description": "Retrieves version details for the specified page and version number.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page.",
        "operationId": "getPageVersionDetails",
        "parameters": [
          {
            "description": "The ID of the page for which version details should be returned.",
            "in": "path",
            "name": "page-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The version number of the page to be returned.",
            "in": "path",
            "name": "version-number",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedVersion"
                }
              }
            },
            "description": "Returned if the requested version details are successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified page, the page was not found, or the version number does not exist."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get version details for page version",
        "tags": [
          "Version"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/space-permissions": {
      "get": {
        "description": "Retrieves the available space permissions.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site.",
        "operationId": "getAvailableSpacePermissions",
        "parameters": [
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of space permissions to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/SpacePermission"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cSpacePermission\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested space permissions are retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\navailable space permissions."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space.permission:confluence"
            ]
          }
        ],
        "summary": "Get available space permissions",
        "tags": [
          "Space Permissions",
          "EAP"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space.permission:confluence"
            ],
            "state": "Current"
          }
        ],
        "x-experimental": true
      }
    },
    "/space-roles": {
      "get": {
        "description": "Retrieves the available space roles.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site; if requesting a certain space's roles, permission to view the space.",
        "operationId": "getAvailableSpaceRoles",
        "parameters": [
          {
            "description": "The space ID for which to filter available space roles; if empty, return all available space roles for the tenant.",
            "in": "query",
            "name": "space-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The space role type to filter results by.",
            "in": "query",
            "name": "role-type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The principal ID to filter results by. If specified, a principal-type must also be specified. Paired with a `principal-type` of `ACCESS_CLASS`, valid values include [`anonymous-users`, `jsm-project-admins`, `authenticated-users`, `all-licensed-users`, `all-product-admins`]",
            "in": "query",
            "name": "principal-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The principal type to filter results by. If specified, a principal-id must also be specified.",
            "in": "query",
            "name": "principal-type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrincipalType"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of space roles to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/SpaceRole"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cSpaceRole\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested space roles are retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\navailable space roles."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space.permission:confluence"
            ]
          }
        ],
        "summary": "Get available space roles",
        "tags": [
          "Space Roles",
          "EAP"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space.permission:confluence"
            ],
            "state": "Current"
          }
        ],
        "x-experimental": true
      }
    },
    "/space-roles/{id}": {
      "get": {
        "description": "Retrieves the space role by ID.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site.",
        "operationId": "getSpaceRolesById",
        "parameters": [
          {
            "description": "The ID of the space role to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SpaceRole"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested space role is retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspace role."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space.permission:confluence"
            ]
          }
        ],
        "summary": "Get space role by ID",
        "tags": [
          "Space Roles",
          "EAP"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space.permission:confluence"
            ],
            "state": "Current"
          }
        ],
        "x-experimental": true
      }
    },
    "/spaces": {
      "get": {
        "description": "Returns all spaces. The results will be sorted by id ascending. The number of results is limited by the `limit` parameter and\nadditional results (if available) will be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nOnly spaces that the user has permission to view will be returned.",
        "operationId": "getSpaces",
        "parameters": [
          {
            "description": "Filter the results to spaces based on their IDs. Multiple IDs can be specified as a comma-separated list.",
            "in": "query",
            "name": "ids",
            "required": false,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Filter the results to spaces based on their keys. Multiple keys can be specified as a comma-separated list.",
            "in": "query",
            "name": "keys",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Filter the results to spaces based on their type.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "global",
                "collaboration",
                "knowledge_base",
                "personal"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the results to spaces based on their status.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "current",
                "archived"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the results to spaces based on their labels. Multiple labels can be specified as a comma-separated list.",
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter the results to spaces favorited by the user with the specified account ID.",
            "in": "query",
            "name": "favorited-by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the results to spaces NOT favorited by the user with the specified account ID.",
            "in": "query",
            "name": "not-favorited-by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SpaceSortOrder"
            }
          },
          {
            "description": "The content format type to be returned in the `description` field of the response. If available, the representation will be available under a response field of the same name under the `description` field.",
            "in": "query",
            "name": "description-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SpaceDescriptionBodyRepresentation"
            }
          },
          {
            "description": "If the icon for the space should be fetched or not.",
            "in": "query",
            "name": "include-icon",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of spaces per result to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/SpaceBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cSpace\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested spaces are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/spaces?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "summary": "Get spaces",
        "tags": [
          "Space"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a Space as specified in the payload.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to create spaces.",
        "operationId": "createSpace",
        "requestBody": {
          "$ref": "#/components/requestBodies/SpaceCreateRequest"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SpaceBulk"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested space is created."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to create spaces."
          },
          "413": {
            "content": {},
            "description": "Returned if the request is too large in size (over 5 MB)."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:space:confluence"
            ]
          }
        ],
        "summary": "Create space",
        "tags": [
          "Space",
          "EAP"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:space:confluence"
            ],
            "state": "Current"
          }
        ],
        "x-experimental": true
      }
    },
    "/spaces/{id}": {
      "get": {
        "description": "Returns a specific space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the space.",
        "operationId": "getSpaceById",
        "parameters": [
          {
            "description": "The ID of the space to be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format type to be returned in the `description` field of the response. If available, the representation will be available under a response field of the same name under the `description` field.",
            "in": "query",
            "name": "description-format",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SpaceDescriptionBodyRepresentation"
            }
          },
          {
            "description": "If the icon for the space should be fetched or not.",
            "in": "query",
            "name": "include-icon",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes operations associated with this space in the response.\nThe number of results will be limited to 50 and sorted in the default sort order.\nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-operations",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes space properties associated with this space in the response.\nThe number of results will be limited to 50 and sorted in the default sort order.\nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-properties",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes space permissions associated with this space in the response.\nThe number of results will be limited to 50 and sorted in the default sort order.\nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-permissions",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes role assignments associated with this space in the response. This parameter is only accepted for EAP sites.\nThe number of results will be limited to 50 and sorted in the default sort order.\nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-role-assignments",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes labels associated with this space in the response.\nThe number of results will be limited to 50 and sorted in the default sort order.\nA `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.",
            "in": "query",
            "name": "include-labels",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SpaceSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested space is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested space or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "summary": "Get space by id",
        "tags": [
          "Space"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/spaces/{id}/blogposts": {
      "get": {
        "description": "Returns all blog posts in a space. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and view the space.\nOnly blog posts that the user has permission to view will be returned.",
        "operationId": "getBlogPostsInSpace",
        "parameters": [
          {
            "description": "The ID of the space for which blog posts should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/BlogPostSortOrder"
            }
          },
          {
            "description": "Filter the results to blog posts based on their status. By default, `current` is used.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "deleted",
                  "trashed"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter the results to blog posts based on their title.",
            "in": "query",
            "name": "title",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of blog posts per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/BlogPostBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cBlogPost\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested blog posts are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/spaces/\u003cid\u003e/blogposts?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get blog posts in space",
        "tags": [
          "Blog Post"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/spaces/{id}/classification-level/default": {
      "delete": {
        "description": "Returns the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/) \nfor a specific space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.",
        "operationId": "deleteSpaceDefaultClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the space for which default classification level should be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Returned if the default classification level was successfully deleted."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to view the specified space or the space was not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence",
              "write:space:confluence"
            ]
          }
        ],
        "summary": "Delete space default classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence",
              "write:space:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Returns the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/) \nfor a specific space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and permission to view the space.",
        "operationId": "getSpaceDefaultClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the space for which default classification level should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationLevel"
                }
              }
            },
            "description": "Returned if the requested default classification level for a space is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- Default classification level is not applied to the space\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to view the specified space or the space was not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "summary": "Get space default classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/) \nfor a specific space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.",
        "operationId": "putSpaceDefaultClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the space for which default classification level should be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SpaceDefaultClassificationLevelUpdateRequest"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Returned if the default classification level was successfully updated."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to view the specified space or the space was not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence",
              "write:space:confluence"
            ]
          }
        ],
        "summary": "Update space default classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence",
              "write:space:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/spaces/{id}/content/labels": {
      "get": {
        "description": "Returns the labels of space content (pages, blogposts etc). The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the space.\nOnly labels that the user has permission to view will be returned.",
        "operationId": "getSpaceContentLabels",
        "parameters": [
          {
            "description": "The ID of the space for which labels should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filter the results to labels based on their prefix.",
            "in": "query",
            "name": "prefix",
            "required": false,
            "schema": {
              "default": "team",
              "enum": [
                "my",
                "team"
              ],
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/LabelSortOrder"
              },
              "type": "string"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cLabel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested labels are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/spaces/\u003cid\u003e/labels?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested space or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "summary": "Get labels for space content",
        "tags": [
          "Label"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/spaces/{id}/custom-content": {
      "get": {
        "description": "Returns all custom content for a given type within a given space. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content and the corresponding space.",
        "operationId": "getCustomContentByTypeInSpace",
        "parameters": [
          {
            "description": "The ID of the space for which custom content should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.\n\nNote: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/CustomContentBodyRepresentation"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/CustomContentBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cCustomContent\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested custom content is returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/spaces/{id}/custom-content?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the space is not found. Returned if the type of custom content is not found. Note, this is distinct from the type being present, but no instances of the type, which would be a 200 with empty results."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "summary": "Get custom content by type in space",
        "tags": [
          "Custom Content"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:custom-content:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/spaces/{id}/labels": {
      "get": {
        "description": "Returns the labels of specific space. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the space.\nOnly labels that the user has permission to view will be returned.",
        "operationId": "getSpaceLabels",
        "parameters": [
          {
            "description": "The ID of the space for which labels should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filter the results to labels based on their prefix.",
            "in": "query",
            "name": "prefix",
            "required": false,
            "schema": {
              "default": "team",
              "enum": [
                "my",
                "team"
              ],
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/LabelSortOrder"
              },
              "type": "string"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cLabel\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested labels are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/spaces/\u003cid\u003e/labels?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested space or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "summary": "Get labels for space",
        "tags": [
          "Label"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/spaces/{id}/operations": {
      "get": {
        "description": "Returns the permitted operations on specific space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the corresponding space.",
        "operationId": "getSpaceOperations",
        "parameters": [
          {
            "description": "The ID of the space for which operations should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            },
            "description": "Returned if the requested operations are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspace or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "summary": "Get permitted operations for space",
        "tags": [
          "Operation"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/spaces/{id}/pages": {
      "get": {
        "description": "Returns all pages in a space. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.\nOnly pages that the user has permission to view will be returned.",
        "operationId": "getPagesInSpace",
        "parameters": [
          {
            "description": "The ID of the space for which pages should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filter the results to pages at the root level of the space or to all pages in the space.",
            "in": "query",
            "name": "depth",
            "required": false,
            "schema": {
              "default": "all",
              "enum": [
                "all",
                "root"
              ],
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSortOrder"
            }
          },
          {
            "description": "Filter the results to pages based on their status. By default, `current` and `archived` are used.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "current",
                  "archived",
                  "deleted",
                  "trashed"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter the results to pages based on their title.",
            "in": "query",
            "name": "title",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/PageBulk"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cPage\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested pages are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/spaces/\u003cid\u003e/pages?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "summary": "Get pages in space",
        "tags": [
          "Page"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:page:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/spaces/{id}/permissions": {
      "get": {
        "description": "Returns space permission assignments for a specific space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the space.",
        "operationId": "getSpacePermissionsAssignments",
        "parameters": [
          {
            "description": "The ID of the space to be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of assignments to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/SpacePermissionAssignment"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cSpacePermissionAssignment\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested assignments are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested space permission assignments or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "summary": "Get space permissions assignments",
        "tags": [
          "Space Permissions"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/spaces/{id}/role-assignments": {
      "get": {
        "description": "Retrieves the space role assignments.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the space.",
        "operationId": "getSpaceRoleAssignments",
        "parameters": [
          {
            "description": "The ID of the space for which to retrieve assignments.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Filters the returned role assignments to the provided role ID.",
            "in": "query",
            "name": "role-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filters the returned role assignments to the provided role type.",
            "in": "query",
            "name": "role-type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filters the returned role assignments to the provided principal id. If specified, a principal-type must also be specified. Paired with a `principal-type` of `ACCESS_CLASS`, valid values include [`anonymous-users`, `jsm-project-admins`, `authenticated-users`, `all-licensed-users`, `all-product-admins`]",
            "in": "query",
            "name": "principal-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filters the returned role assignments to the provided principal type. If specified, a principal-id must also be specified.",
            "in": "query",
            "name": "principal-type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PrincipalType"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of space roles to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/SpaceRoleAssignment"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cSpaceRoleAssignment\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested space role assignments are retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspace or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space.permission:confluence"
            ]
          }
        ],
        "summary": "Get space role assignments",
        "tags": [
          "Space Roles",
          "EAP"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space.permission:confluence"
            ],
            "state": "Current"
          }
        ],
        "x-experimental": true
      },
      "post": {
        "description": "Sets space role assignments as specified in the payload.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to manage roles in the space.",
        "operationId": "setSpaceRoleAssignments",
        "parameters": [
          {
            "description": "The ID of the space for which to retrieve assignments.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SetSpaceRoleAssignmentRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/SpaceRoleAssignment"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cSpaceRoleAssignment\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested update to space role assignments succeeds in its entirety."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to set roles in the space, or the space was not found."
          },
          "413": {
            "content": {},
            "description": "Returned if the request is too large in size (over 5 MB)."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:space.permission:confluence"
            ]
          }
        ],
        "summary": "Set space role assignments",
        "tags": [
          "Space Roles",
          "EAP"
        ],
        "x-atlassian-connect-scope": "SPACE_ADMIN",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:space.permission:confluence"
            ],
            "state": "Current"
          }
        ],
        "x-experimental": true
      }
    },
    "/spaces/{space-id}/properties": {
      "get": {
        "description": "Returns all properties for the given space. Space properties are a key-value storage associated with a space.\nThe limit parameter specifies the maximum number of results returned in a single response. Use the `link` response header\nto paginate through additional results.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.",
        "operationId": "getSpaceProperties",
        "parameters": [
          {
            "description": "The ID of the space for which space properties should be returned.",
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The key of the space property to retrieve. This should be used when a user knows the key of their property, but needs to retrieve the id for use in other methods.",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/SpaceProperty"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cSpaceProperty\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested space properties are returned. `results` may be empty if no results were found.",
            "headers": {
              "Link": {
                "schema": {
                  "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/spaces/\u003cid\u003e/properties?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "summary": "Get space properties in space",
        "tags": [
          "Space Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a new space property.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.",
        "operationId": "createSpaceProperty",
        "parameters": [
          {
            "description": "The ID of the space for which space properties should be returned.",
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpacePropertyCreateRequest"
              }
            }
          },
          "description": "The space property to be created",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceProperty"
                }
              }
            },
            "description": "Returned if the space property was created successfully.",
            "headers": {
              "location": {
                "schema": {
                  "description": "Returns the URL at which the space property is retrievable.\n",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence",
              "write:space:confluence"
            ]
          }
        ],
        "summary": "Create space property in space",
        "tags": [
          "Space Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence",
              "write:space:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/spaces/{space-id}/properties/{property-id}": {
      "delete": {
        "description": "Deletes a space property by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.",
        "operationId": "deleteSpacePropertyById",
        "parameters": [
          {
            "description": "The ID of the space the property belongs to.",
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be deleted.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the space property was deleted successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence",
              "write:space:confluence"
            ]
          }
        ],
        "summary": "Delete space property by id",
        "tags": [
          "Space Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence",
              "write:space:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Retrieve a space property by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.",
        "operationId": "getSpacePropertyById",
        "parameters": [
          {
            "description": "The ID of the space the property belongs to.",
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be retrieved.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceProperty"
                }
              }
            },
            "description": "Returned if the space property was retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "summary": "Get space property by id",
        "tags": [
          "Space Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a space property by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.",
        "operationId": "updateSpacePropertyById",
        "parameters": [
          {
            "description": "The ID of the space the property belongs to.",
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be updated.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpacePropertyUpdateRequest"
              }
            }
          },
          "description": "The space property to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceProperty"
                }
              }
            },
            "description": "Returned if the space property was updated successfully.",
            "headers": {
              "location": {
                "schema": {
                  "description": "Returns the URL at which the space property is retrievable.\n",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence",
              "write:space:confluence"
            ]
          }
        ],
        "summary": "Update space property by id",
        "tags": [
          "Space Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:space:confluence",
              "write:space:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/tasks": {
      "get": {
        "description": "Returns all tasks. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nOnly tasks that the user has permission to view will be returned.",
        "operationId": "getTasks",
        "parameters": [
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "description": "Specifies whether to include blank tasks in the response. Defaults to `true`.",
            "in": "query",
            "name": "include-blank-tasks",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filters on the status of the task.",
            "in": "query",
            "name": "status",
            "schema": {
              "enum": [
                "complete",
                "incomplete"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filters on task ID. Multiple IDs can be specified.",
            "in": "query",
            "name": "task-id",
            "required": false,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Filters on the space ID of the task. Multiple IDs can be specified.",
            "in": "query",
            "name": "space-id",
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Filters on the page ID of the task. Multiple IDs can be specified. Note - page and blog post filters can be used in conjunction.",
            "in": "query",
            "name": "page-id",
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Filters on the blog post ID of the task. Multiple IDs can be specified. Note - page and blog post filters can be used in conjunction.",
            "in": "query",
            "name": "blogpost-id",
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Filters on the Account ID of the user who created this task. Multiple IDs can be specified.",
            "in": "query",
            "name": "created-by",
            "schema": {
              "items": {
                "type": "string"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Filters on the Account ID of the user to whom this task is assigned. Multiple IDs can be specified.",
            "in": "query",
            "name": "assigned-to",
            "schema": {
              "items": {
                "type": "string"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Filters on the Account ID of the user who completed this task. Multiple IDs can be specified.",
            "in": "query",
            "name": "completed-by",
            "schema": {
              "items": {
                "type": "string"
              },
              "maxItems": 250,
              "type": "array"
            }
          },
          {
            "description": "Filters on start of date-time range of task based on creation date (inclusive). Input is epoch time in milliseconds.",
            "in": "query",
            "name": "created-at-from",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filters on end of date-time range of task based on creation date (inclusive). Input is epoch time in milliseconds.",
            "in": "query",
            "name": "created-at-to",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filters on start of date-time range of task based on due date (inclusive). Input is epoch time in milliseconds.",
            "in": "query",
            "name": "due-at-from",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filters on end of date-time range of task based on due date (inclusive). Input is epoch time in milliseconds.",
            "in": "query",
            "name": "due-at-to",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filters on start of date-time range of task based on completion date (inclusive). Input is epoch time in milliseconds.",
            "in": "query",
            "name": "completed-at-from",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filters on end of date-time range of task based on completion date (inclusive). Input is epoch time in milliseconds.",
            "in": "query",
            "name": "completed-at-to",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of tasks per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cTask\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested tasks are returned.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/tasks?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:task:confluence"
            ]
          }
        ],
        "summary": "Get tasks",
        "tags": [
          "Task"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:task:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/tasks/{id}": {
      "get": {
        "description": "Returns a specific task. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the containing page or blog post and its corresponding space.",
        "operationId": "getTaskById",
        "parameters": [
          {
            "description": "The ID of the task to be returned. If you don't know the task ID, use Get tasks and filter the results.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            },
            "description": "Returned if the requested task is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested task or the task was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:task:confluence"
            ]
          }
        ],
        "summary": "Get task by id",
        "tags": [
          "Task"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:task:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a task by id. This endpoint currently only supports updating task status.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the containing page or blog post and view its corresponding space.",
        "operationId": "updateTask",
        "parameters": [
          {
            "description": "The ID of the task to be updated. If you don't know the task ID, use Get tasks and filter the results.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "in": "query",
            "name": "body-format",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TaskUpdateRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            },
            "description": "Returned if the requested task is updated."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing from the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- The provided task does not exist\n- The user does not have permissions to view the task\n- The user does not have the needed permissions to update the containing page or blog post in the corresponding space"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:task:confluence"
            ]
          }
        ],
        "summary": "Update task",
        "tags": [
          "Task"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:task:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/user/access/check-access-by-email": {
      "post": {
        "description": "Returns the list of emails from the input list that do not have access to site.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
        "operationId": "checkAccessByEmail",
        "requestBody": {
          "$ref": "#/components/requestBodies/CheckAccessOrInviteByEmailRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "emailsWithoutAccess": {
                      "description": "List of emails that do not have access to site.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "invalidEmails": {
                      "description": "List of invalid emails provided in the request.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Returns object with list of emails without access to site."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the calling user does not have permission to check access for emails on site."
          },
          "503": {
            "description": "Returned if API is disabled on site"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:configuration:confluence"
            ]
          }
        ],
        "summary": "Check site access for a list of emails",
        "tags": [
          "User"
        ],
        "x-atlassian-connect-scope": "NONE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:configuration:confluence"
            ],
            "state": "Current"
          }
        ],
        "x-experimental": true
      }
    },
    "/user/access/invite-by-email": {
      "post": {
        "description": "Invite a list of emails to the site.\n\nIgnores all invalid emails and no action is taken for the emails that already have access to the site.\n\n\u003cb\u003eNOTE:\u003c/b\u003e This API is asynchronous and may take some time to complete.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
        "operationId": "inviteByEmail",
        "requestBody": {
          "$ref": "#/components/requestBodies/CheckAccessOrInviteByEmailRequest"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Returns object with list of emails without access to site."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the calling user does not have permission to check access for emails on site."
          },
          "503": {
            "description": "Returned if API is disabled on site"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:configuration:confluence"
            ]
          }
        ],
        "summary": "Invite a list of emails to the site",
        "tags": [
          "User"
        ],
        "x-atlassian-connect-scope": "NONE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:configuration:confluence"
            ],
            "state": "Current"
          }
        ],
        "x-experimental": true
      }
    },
    "/users-bulk": {
      "post": {
        "description": "Returns user details for the ids provided in the request body.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nThe user must be able to view user profiles in the Confluence site.",
        "operationId": "createBulkUserLookup",
        "requestBody": {
          "$ref": "#/components/requestBodies/BulkUsersRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/User"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cUser\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the user info is returned for the account IDs. `results` may be empty if no account IDs were found.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. Example response header format: \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "404": {
            "description": "Returned if the calling user does not have permission to use Confluence or view user profiles."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:user:confluence"
            ]
          }
        ],
        "summary": "Create bulk user lookup using ids",
        "tags": [
          "User"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": true
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:user:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/whiteboards/{id}": {
      "delete": {
        "description": "Delete a whiteboard by id.\n\nDeleting a whiteboard moves the whiteboard to the trash, where it can be restored later\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the whiteboard and its corresponding space.\nPermission to delete whiteboards in the space.",
        "operationId": "deleteWhiteboard",
        "parameters": [
          {
            "description": "The ID of the whiteboard to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Returned if the whiteboard was successfully deleted."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- The provided whiteboard does not exist\n- The user does not have permissions to view the whiteboard\n- The user does not have the needed permissions to delete a whiteboard in the space"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:whiteboard:confluence"
            ]
          }
        ],
        "summary": "Delete whiteboard",
        "tags": [
          "Whiteboard"
        ],
        "x-atlassian-connect-scope": "DELETE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "delete:whiteboard:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Returns a specific whiteboard.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the whiteboard and its corresponding space.",
        "operationId": "getWhiteboardById",
        "parameters": [
          {
            "description": "The ID of the whiteboard to be returned",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/WhiteboardSingle"
                    },
                    {
                      "properties": {
                        "_links": {
                          "properties": {
                            "base": {
                              "description": "Base url of the Confluence site.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Returned if the requested whiteboard is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested whiteboard or the whiteboard was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:whiteboard:confluence"
            ]
          }
        ],
        "summary": "Get whiteboard by id",
        "tags": [
          "Whiteboard"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:whiteboard:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/whiteboards/{id}/ancestors": {
      "get": {
        "description": "Returns all ancestors for a given whiteboard by ID in top-to-bottom order (that is, the highest ancestor is the first\nitem in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available by calling this endpoint with the ID of first ancestor in the response payload.\n\nThis endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such\nas [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nPermission to view the whiteboard and its corresponding space",
        "operationId": "getWhiteboardAncestors",
        "parameters": [
          {
            "description": "The ID of the whiteboard.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of items per result to return. If more results exist, call the endpoint with the highest ancestor's ID to fetch the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/Ancestor"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cAncestor\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested ancestors are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified whiteboard or the whiteboard was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:content.metadata:confluence"
            ]
          }
        ],
        "summary": "Get all ancestors of whiteboard",
        "tags": [
          "Ancestors"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:content.metadata:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/whiteboards/{id}/classification-level": {
      "get": {
        "description": "Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)\nfor a specific whiteboard.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and permission to view the whiteboard.",
        "operationId": "getWhiteboardClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the whiteboard for which classification level should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationLevel"
                }
              }
            },
            "description": "Returned if the requested classification level for a whiteboard is returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- Whiteboard does not have a classification level applied\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to view the specified whiteboard, or the whiteboard was not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:whiteboard:confluence"
            ]
          }
        ],
        "summary": "Get whiteboard classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:whiteboard:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)\nfor a specific whiteboard.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and permission to edit the whiteboard.",
        "operationId": "putWhiteboardClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the whiteboard for which classification level should be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LiveEditContentClassificationLevelUpdateRequest"
        },
        "responses": {
          "204": {
            "description": "Returned if the classification level was successfully updated."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if:\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to edit the specified whiteboard\n- The whiteboard or classification level was not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:whiteboard:confluence"
            ]
          }
        ],
        "summary": "Update whiteboard classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:whiteboard:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/whiteboards/{id}/classification-level/reset": {
      "post": {
        "description": "Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)\nfor a specific whiteboard for the space \n[default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Permission to access the Confluence site ('Can use' global permission) and permission to view the whiteboard.",
        "operationId": "postWhiteboardClassificationLevel",
        "parameters": [
          {
            "description": "The ID of the whiteboard for which classification level should be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LiveEditContentClassificationLevelResetRequest"
        },
        "responses": {
          "204": {
            "description": "Returned if the classification level was successfully reset."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "description": "Returned if:\n- Site's edition does not have entitlement(s) for [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)\n- The calling user does not have permission to edit the specified whiteboard, or the whiteboard was not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:whiteboard:confluence"
            ]
          }
        ],
        "summary": "Reset whiteboard classification level",
        "tags": [
          "Classification Level"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "write:whiteboard:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/whiteboards/{id}/operations": {
      "get": {
        "description": "Returns the permitted operations on specific whiteboard.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the whiteboard and its corresponding space.",
        "operationId": "getWhiteboardOperations",
        "parameters": [
          {
            "description": "The ID of the whiteboard for which operations should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            },
            "description": "Returned if the requested operations are returned."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nrequested whiteboard or the whiteboard was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:whiteboard:confluence"
            ]
          }
        ],
        "summary": "Get permitted operations for a whiteboard",
        "tags": [
          "Operation"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:whiteboard:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/whiteboards/{id}/properties": {
      "get": {
        "description": "Retrieves Content Properties tied to a specified whiteboard.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the whiteboard.",
        "operationId": "getWhiteboardContentProperties",
        "parameters": [
          {
            "description": "The ID of the whiteboard for which content properties should be returned.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to sort the result by a particular field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_links": {
                      "$ref": "#/components/schemas/MultiEntityLinks"
                    },
                    "results": {
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      },
                      "type": "array"
                    }
                  },
                  "title": "MultiEntityResult\u003cContentProperty\u003e",
                  "type": "object"
                }
              }
            },
            "description": "Returned if the requested content properties are successfully retrieved.",
            "headers": {
              "Link": {
                "description": "This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. Example response header format: `Link: \u003c/wiki/api/v2/whiteboards/\u003cid\u003e/properties?cursor=\u003copaque cursor token\u003e\u003e; rel=\"next\", \u003chttps://site.atlassian.net/wiki\u003e; rel=\"base\"`\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified whiteboard or the whiteboard was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:whiteboard:confluence"
            ]
          }
        ],
        "summary": "Get content properties for whiteboard",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:whiteboard:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "post": {
        "description": "Creates a new content property for a whiteboard.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the whiteboard.",
        "operationId": "createWhiteboardProperty",
        "parameters": [
          {
            "description": "The ID of the whiteboard to create a property for.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "description": "The content property to be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was created successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified whiteboard or the whiteboard was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:whiteboard:confluence",
              "write:whiteboard:confluence"
            ]
          }
        ],
        "summary": "Create content property for whiteboard",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:whiteboard:confluence",
              "write:whiteboard:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    },
    "/whiteboards/{whiteboard-id}/properties/{property-id}": {
      "delete": {
        "description": "Deletes a content property for a whiteboard by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the whiteboard.",
        "operationId": "deleteWhiteboardPropertyById",
        "parameters": [
          {
            "description": "The ID of the whiteboard the property belongs to.",
            "in": "path",
            "name": "whiteboard-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be deleted.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified whiteboard or the whiteboard was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:whiteboard:confluence",
              "write:whiteboard:confluence"
            ]
          }
        ],
        "summary": "Delete content property for whiteboard by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:whiteboard:confluence",
              "write:whiteboard:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "get": {
        "description": "Retrieves a specific Content Property by ID that is attached to a specified whiteboard.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the whiteboard.",
        "operationId": "getWhiteboardContentPropertiesById",
        "parameters": [
          {
            "description": "The ID of the whiteboard for which content properties should be returned.",
            "in": "path",
            "name": "whiteboard-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the content property being requested.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the requested content property is successfully retrieved."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified whiteboard, the whiteboard was not found, or the property was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:whiteboard:confluence"
            ]
          }
        ],
        "summary": "Get content property for whiteboard by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "READ",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:whiteboard:confluence"
            ],
            "state": "Current"
          }
        ]
      },
      "put": {
        "description": "Update a content property for a whiteboard by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the whiteboard.",
        "operationId": "updateWhiteboardPropertyById",
        "parameters": [
          {
            "description": "The ID of the whiteboard the property belongs to.",
            "in": "path",
            "name": "whiteboard-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the property to be updated.",
            "in": "path",
            "name": "property-id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "description": "The content property to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "description": "Returned if the content property was updated successfully."
          },
          "400": {
            "content": {},
            "description": "Returned if an invalid request is provided."
          },
          "401": {
            "content": {},
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request."
          },
          "404": {
            "content": {},
            "description": "Returned if the calling user does not have permission to view the\nspecified whiteboard or the whiteboard was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:whiteboard:confluence",
              "write:whiteboard:confluence"
            ]
          }
        ],
        "summary": "Update content property for whiteboard by id",
        "tags": [
          "Content Properties"
        ],
        "x-atlassian-connect-scope": "WRITE",
        "x-atlassian-data-security-policy": [
          {
            "app-access-rule-exempt": false
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "scopes": [
              "read:whiteboard:confluence",
              "write:whiteboard:confluence"
            ],
            "state": "Current"
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://{your-domain}/wiki/api/v2",
      "variables": {
        "your-domain": {
          "default": "no-default",
          "description": "Specific domain of the Confluence site being used. Must be provided."
        }
      }
    }
  ],
  "tags": [
    {
      "description": "",
      "name": "Attachment"
    },
    {
      "description": "",
      "name": "Ancestors"
    },
    {
      "description": "",
      "name": "Blog Post"
    },
    {
      "description": "",
      "name": "Children"
    },
    {
      "description": "",
      "name": "Classification Level"
    },
    {
      "description": "",
      "name": "Comment"
    },
    {
      "description": "",
      "name": "Content"
    },
    {
      "description": "",
      "name": "Content Properties"
    },
    {
      "description": "",
      "name": "Custom Content"
    },
    {
      "description": "",
      "name": "Database"
    },
    {
      "description": "",
      "name": "Data Policies"
    },
    {
      "description": "",
      "name": "Folder"
    },
    {
      "description": "",
      "name": "Label"
    },
    {
      "description": "",
      "name": "Like"
    },
    {
      "description": "",
      "name": "Operation"
    },
    {
      "description": "",
      "name": "Page"
    },
    {
      "description": "",
      "name": "Smart Link"
    },
    {
      "description": "",
      "name": "Space"
    },
    {
      "description": "",
      "name": "Space Permissions"
    },
    {
      "description": "",
      "name": "Space Properties"
    },
    {
      "description": "",
      "name": "Space Roles"
    },
    {
      "description": "",
      "name": "Task"
    },
    {
      "description": "",
      "name": "User"
    },
    {
      "description": "",
      "name": "Version"
    },
    {
      "description": "",
      "name": "Whiteboard"
    }
  ],
  "x-atlassian-narrative": {
    "documents": [
      {
        "anchor": "about",
        "body": "This is the reference for the Confluence Cloud REST API v2, with definitions and performance intended to be an improvement over v1. You can click on the meatball menu in the upper right to download the spec or Postman collection.",
        "title": "About"
      },
      {
        "anchor": "auth",
        "body": "**Authentication:** If you are building a Cloud app, authentication is implemented via JWT or Oauth 2.0, depending on what you're building (see [Authentication for apps](https://developer.atlassian.com/cloud/confluence/authentication-for-apps/)). Otherwise, if you are authenticating directly against the REST API, the REST API supports basic auth (see [Basic auth for REST APIs](https://developer.atlassian.com/cloud/confluence/basic-auth-for-rest-apis/)).\n\n**Authorization:** If you are building a Cloud app, authorization can be implemented by [scopes](https://developer.atlassian.com/cloud/confluence/scopes/) or by [OAuth 2.0 user impersonation](https://developer.atlassian.com/cloud/confluence/oauth-2-jwt-bearer-tokens-for-apps). Otherwise, if you are making calls directly against the REST API, authorization is based on the user used in the authentication process.\n\nSee [Security overview](https://developer.atlassian.com/cloud/confluence/security-overview/) for more details on authentication and authorization.",
        "title": "Authentication and authorization"
      },
      {
        "anchor": "using",
        "body": "**Pagination:** The Confluence REST API v2 uses cursor-based pagination: a method that returns a response with multiple objects can only return a limited number at one time. This limits the size of responses and conserves server resources.\n\nUse the 'limit' and 'cursor' parameters on endpoints that return multiple objects to work with pagination. First, make a request with your desired limit in the 'limit' parameter, then observe the `Link` header in the response. If there are additional entities to be retrieved, the `next` URL in the `Link` header will allow you to retrieve the next set of results. This relative URL will also be available under the `_links.next` property of paginated responses. \n\nFor example, the following request will return 5 page objects (if there are 5 present in the target site).\n```\nGET /wiki/api/v2/pages?limit=5\n```\n\nIf there are additional pages available, the `Link` header will look like:\n```\n\u003c/wiki/api/v2/pages?limit=5\u0026cursor=\u003ccursor token\u003e\u003e; rel=\"next\"\n```\nThe URL within the `Link` header will allow you to access the next 5 pages, while the `rel=\"next\"` denotes that the URL refers to the \"next\" set of pages. Relations for a single URL are separated by semicolons (;) and URLs are separated by commas (,)\nIf there are no related URLs, the `Link` header will not be present in the response and neither will the `next` property for `_links` in the response body.",
        "title": "Using the REST API"
      }
    ]
  }
}